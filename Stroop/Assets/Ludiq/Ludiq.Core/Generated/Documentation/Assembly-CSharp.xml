<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Assembly-CSharp</name>
    </assembly>
    <members>
        <member name="T:FastList`1.CompareFunc">
            <summary>
            Comparison function should return -1 if left is less than right, 1 if left is greater than right, and 0 if they match.
            </summary>
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_ApplicationLifecycle_LaunchIntentChanged">
            Sent when a launch intent is received (for both cold and warm starts). The
            payload is the type of the intent. ApplicationLifecycle.GetLaunchDetails()
            should be called to get the other details.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_AssetFile_DownloadUpdate">
            Sent to indicate download progress for asset files.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_HTTP_Transfer">
            Sent to indicate that more data has been read or an error occured.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Livestreaming_StatusChange">
            Indicates that the livestreaming session has been updated. You can use this
            information to throttle your game performance or increase CPU/GPU
            performance. Use Message.GetLivestreamingStatus() to extract the updated
            livestreaming status.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Matchmaking_MatchFound">
            Indicates that a match has been found, for example after calling
            Matchmaking.Enqueue(). Use Message.GetRoom() to extract the matchmaking
            room.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Networking_ConnectionStateChange">
            Indicates that a connection has been established or there's been an error.
            Use NetworkingPeer.GetState() to get the result; as above,
            NetworkingPeer.GetID() returns the ID of the peer this message is for.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Networking_PeerConnectRequest">
            Indicates that another user is attempting to establish a P2P connection
            with us. Use NetworkingPeer.GetID() to extract the ID of the peer.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Networking_PingResult">
            Generated in response to Net.Ping(). Either contains ping time in
            microseconds or indicates that there was a timeout.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Room_InviteAccepted">
             Indicates that the user has accepted an invitation, for example in Oculus
             Home. Use Message.GetString() to extract the ID of the room that the user
             has been inivted to as a string. Then call ovrID_FromString() to parse it
             into an ovrID.
            
             Note that you must call Room.Join() if you want to actually join the room.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Room_InviteReceived">
            Handle this to notify the user when they've received an invitation to join
            a room in your game. You can use this in lieu of, or in addition to,
            polling for room invitations via Notification.GetRoomInviteNotifications().
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Room_RoomUpdate">
            Indicates that the current room has been updated. Use Message.GetRoom() to
            extract the updated room.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Voip_ConnectRequest">
            Sent when another user is attempting to establish a VoIP connection. Use
            Message.GetNetworkingPeer() to extract information about the user, and
            Voip.Accept() to accept the connection.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Voip_StateChange">
            Sent to indicate that the state of the VoIP connection changed. Use
            Message.GetNetworkingPeer() and NetworkingPeer.GetState() to extract the
            current state.
        </member>
        <member name="F:Oculus.Platform.Message.MessageType.Notification_Voip_SystemVoipState">
             Sent to indicate that some part of the overall state of SystemVoip has
             changed. Use Message.GetSystemVoipState() and the properties of
             SystemVoipState to extract the state that triggered the notification.
            
             Note that the state may have changed further since the notification was
             generated, and that you may call the `GetSystemVoip...()` family of
             functions at any time to get the current state directly.
        </member>
        <member name="M:Oculus.Platform.Packet.ReadBytes(System.Byte[])">
            Copies all the bytes in the payload into byte[] destination.  ex:
              Package package ...
              byte[] destination = new byte[package.Size];
              package.ReadBytes(destination);
        </member>
        <member name="F:Oculus.Platform.PeerConnectionState.Connected">
            Connection to the peer is established.
        </member>
        <member name="F:Oculus.Platform.PeerConnectionState.Timeout">
            A timeout expired while attempting to (re)establish a connection. This can
            happen if peer is unreachable or rejected the connection.
        </member>
        <member name="F:Oculus.Platform.PeerConnectionState.Closed">
            Connection to the peer is closed. A connection transitions into this state
            when it is explicitly closed by either the local or remote peer calling
            Net.Close(). It also enters this state if the remote peer no longer
            responds to our keep-alive probes.
        </member>
        <member name="M:Oculus.Platform.Rooms.CreateAndJoinPrivate(Oculus.Platform.RoomJoinPolicy,System.UInt32,System.Boolean)">
             DEPRECATED. Use CreateAndJoinPrivate2.
             \param joinPolicy Specifies who can join the room without an invite.
             \param maxUsers The maximum number of users allowed in the room, including the creator.
             \param subscribeToUpdates If true, sends a message with type MessageType.Notification_Room_RoomUpdate when room data changes, such as when users join or leave.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.CreateAndJoinPrivate2(Oculus.Platform.RoomJoinPolicy,System.UInt32,Oculus.Platform.RoomOptions)">
             Creates a new private (client controlled) room and adds the caller to it.
             This type of room is good for matches where the user wants to play with
             friends, as they're primarially discoverable by examining which rooms your
             friends are in.
             \param joinPolicy Specifies who can join the room without an invite.
             \param maxUsers The maximum number of users allowed in the room, including the creator.
             \param roomOptions Additional room configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.Get(System.UInt64)">
             Allows arbitrary rooms for the application to be loaded.
             \param roomID The room to load.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.GetCurrent">
             Easy loading of the room you're currently in. If you don't want live
             updates on your current room (by using subscribeToUpdates), you can use
             this to refresh the data.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.GetCurrentForUser(System.UInt64)">
             Allows the current room for a given user to be loaded. Remember that the
             user's privacy settings may not allow their room to be loaded. Because of
             this, it's often possible to load the users in a room, but not to take
             those users and load their room.
             \param userID ID of the user for which to load the room.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.GetInvitableUsers">
             DEPRECATED. Use GetInvitableUsers2.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.GetInvitableUsers2(Oculus.Platform.RoomOptions)">
             Loads a list of users you can invite to a room. These are pulled from your
             friends list and recently met lists and filtered for relevance and
             interest. If the room cannot be joined, this list will be empty. By
             default, the invitable users returned will be for the user's current room.
            
             If your application grouping was created after September 9 2017, recently
             met users will be included by default. If your application grouping was
             created before then, you can go to edit the setting in the "Rooms and
             Matchmaking" section of Platform Services at dashboard.oculus.com
            
             Customization can be done via RoomOptions. Create this object with
             RoomOptions(). The params that could be used are:
            
             1. RoomOptions.SetRoomId()- will return the invitable users for this room
             (instead of the current room).
            
             2. RoomOptions.SetOrdering() - returns the list of users in the provided
             ordering (see UserOrdering enum).
            
             3. RoomOptions.SetRecentlyMetTimeWindow() - how long long ago should we
             include users you've recently met in the results?
            
             4. RoomOptions.SetMaxUserResults() - we will limit the number of results
             returned. By default, the number is unlimited, but the server may choose to
             limit results for performance reasons.
            
             5. RoomOptions.SetExcludeRecentlyMet() - Don't include users recently in
             rooms with this user in the result. Also, see the above comment.
            
             Example custom C++ usage:
            
               auto roomOptions = ovr_RoomOptions_Create();
               ovr_RoomOptions_SetOrdering(roomOptions, ovrUserOrdering_PresenceAlphabetical);
               ovr_RoomOptions_SetRoomId(roomOptions, roomID);
               ovr_Room_GetInvitableUsers2(roomOptions);
               ovr_RoomOptions_Destroy(roomOptions);
             \param roomOptions Additional configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.GetModeratedRooms">
             Fetches the list of moderated rooms created for the application.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.InviteUser(System.UInt64,System.String)">
             Invites a user to the specified room. They will receive a notification via
             MessageType.Notification_Room_InviteReceived if they are in your game,
             and/or they can poll for room invites using
             Notification.GetRoomInviteNotifications().
             \param roomID The ID of your current room.
             \param inviteToken A user's invite token, returned by Room.GetInvitableUsers().
            
        </member>
        <member name="M:Oculus.Platform.Rooms.Join(System.UInt64,System.Boolean)">
             Joins the target room (leaving the one you're currently in).
             \param roomID The room to join.
             \param subscribeToUpdates If true, sends a message with type MessageType.Notification_Room_RoomUpdate when room data changes, such as when users join or leave.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.Join2(System.UInt64,Oculus.Platform.RoomOptions)">
             Joins the target room (leaving the one you're currently in).
             \param roomID The room to join.
             \param roomOptions Additional room configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.KickUser(System.UInt64,System.UInt64,System.Int32)">
             Allows the room owner to kick a user out of the current room.
             \param roomID The room that you currently own (check Room.GetOwner()).
             \param userID The user to be kicked (cannot be yourself).
             \param kickDurationSeconds Length of the ban, in seconds.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.LaunchInvitableUserFlow(System.UInt64)">
             Launch the invitable user flow to invite to the logged in user's current
             room. This is intended to be a nice shortcut for developers not wanting to
             build out their own Invite UI although it has the same rules as if you
             build it yourself.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.Leave(System.UInt64)">
             Removes you from your current room. Returns the solo room you are now in if
             it succeeds
             \param roomID The room you're currently in.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.SetDescription(System.UInt64,System.String)">
             Allows the room owner to set the description of their room.
             \param roomID The room that you currently own (check Room.GetOwner()).
             \param description The new name of the room.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.UpdateMembershipLockStatus(System.UInt64,Oculus.Platform.RoomMembershipLockStatus)">
             Disallow new members from being able to join the room. This will prevent
             joins from Room.Join(), invites, 'Join From Home', etc. Users that are in
             the room at the time of lockdown WILL be able to rejoin.
             \param roomID The room whose membership you want to lock or unlock.
             \param membershipLockStatus The new LockStatus for the room
            
        </member>
        <member name="M:Oculus.Platform.Rooms.UpdateOwner(System.UInt64,System.UInt64)">
             Allows the room owner to transfer ownership to someone else.
             \param roomID The room that the user owns (check Room.GetOwner()).
             \param userID The new user to make an owner; the user must be in the room.
            
        </member>
        <member name="M:Oculus.Platform.Rooms.UpdatePrivateRoomJoinPolicy(System.UInt64,Oculus.Platform.RoomJoinPolicy)">
             Sets the join policy of the user's private room.
             \param roomID The room ID that the user owns (check Room.GetOwner()).
             \param newJoinPolicy The new join policy for the room.
            
        </member>
        <member name="M:Oculus.Platform.Livestreaming.GetStatus">
             Return the status of the current livestreaming session if there is one.
            
        </member>
        <member name="M:Oculus.Platform.Livestreaming.PauseStream">
             Pauses the livestreaming session if there is one. NOTE: this function is
             safe to call if no session is active.
            
        </member>
        <member name="M:Oculus.Platform.Livestreaming.ResumeStream">
             Resumes the livestreaming session if there is one. NOTE: this function is
             safe to call if no session is active.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Browse(System.String,Oculus.Platform.Matchmaking.CustomQuery)">
             DEPRECATED. Use Browse2.
             \param pool A BROWSE type matchmaking pool.
             \param customQueryData Optional. Custom query data.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Browse2(System.String,Oculus.Platform.MatchmakingOptions)">
             Modes: BROWSE
            
             See overview documentation above.
            
             Return a list of matchmaking rooms in the current pool filtered by skill
             and ping (if enabled). This also enqueues the user in the matchmaking
             queue. When the user has made a selection, call Room.Join2() on one of the
             rooms that was returned. If the user stops browsing, call
             Matchmaking.Cancel().
            
             In addition to the list of rooms, enqueue results are also returned. Call
             MatchmakingBrowseResult.GetEnqueueResult() to obtain them. See
             OVR_MatchmakingEnqueueResult.h for details.
             \param pool A BROWSE type matchmaking pool.
             \param matchmakingOptions Additional matchmaking configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Cancel(System.String,System.String)">
             DEPRECATED. Use Cancel2.
             \param pool The pool in question.
             \param requestHash Used to find your entry in a queue.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Cancel">
             Modes: QUICKMATCH, BROWSE
            
             Makes a best effort to cancel a previous Enqueue request before a match
             occurs. Typically triggered when a user gives up waiting. For BROWSE mode,
             call this when a user gives up looking through the room list or when the
             host of a room wants to stop receiving new users. If you don't cancel but
             the user goes offline, the user/room will be timed out of the queue within
             30 seconds.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.CreateAndEnqueueRoom(System.String,System.UInt32,System.Boolean,Oculus.Platform.Matchmaking.CustomQuery)">
             DEPRECATED. Use CreateAndEnqueueRoom2.
             \param pool The matchmaking pool to use, which is defined for the app.
             \param maxUsers Overrides the Max Users value, which is configured in pool settings of the Developer Dashboard.
             \param subscribeToUpdates If true, sends a message with type MessageType.Notification_Room_RoomUpdate when the room data changes, such as when users join or leave.
             \param customQueryData Optional.  See "Custom criteria" section above.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.CreateAndEnqueueRoom2(System.String,Oculus.Platform.MatchmakingOptions)">
             Modes: BROWSE, QUICKMATCH (Advanced; Can Users Create Rooms = true)
            
             See overview documentation above.
            
             Create a matchmaking room, join it, and enqueue it. This is the preferred
             method. But, if you do not wish to automatically enqueue the room, you can
             call CreateRoom2 instead.
            
             Visit https://developer2.oculus.com/application/[YOUR_APP_ID]/matchmaking
             to set up pools and queries
             \param pool The matchmaking pool to use, which is defined for the app.
             \param matchmakingOptions Additional matchmaking configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.CreateRoom(System.String,System.UInt32,System.Boolean)">
             DEPRECATED. Use CreateRoom2.
             \param pool The matchmaking pool to use, which is defined for the app.
             \param maxUsers Overrides the Max Users value, which is configured in pool settings of the Developer Dashboard.
             \param subscribeToUpdates If true, sends a message with type MessageType.Notification_Room_RoomUpdate when room data changes, such as when users join or leave.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.CreateRoom2(System.String,Oculus.Platform.MatchmakingOptions)">
             Create a matchmaking room and join it, but do not enqueue the room. After
             creation, you can call EnqueueRoom2. However, Oculus recommends using
             CreateAndEnqueueRoom2 instead.
            
             Modes: BROWSE, QUICKMATCH (Advanced; Can Users Create Rooms = true)
            
             Create a matchmaking room and join it, but do not enqueue the room. After
             creation, you can call EnqueueRoom. Consider using CreateAndEnqueueRoom
             instead.
            
             Visit https://developer2.oculus.com/application/[YOUR_APP_ID]/matchmaking
             to set up pools and queries
             \param pool The matchmaking pool to use, which is defined for the app.
             \param matchmakingOptions Additional matchmaking configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Enqueue(System.String,Oculus.Platform.Matchmaking.CustomQuery)">
             DEPRECATED. Use Enqueue2.
             \param pool The pool to enqueue in.
             \param customQueryData Optional.  See "Custom criteria" section above.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.Enqueue2(System.String,Oculus.Platform.MatchmakingOptions)">
             Modes: QUICKMATCH
            
             See overview documentation above.
            
             Enqueue yourself to await an available matchmaking room. The platform
             returns a MessageType.Notification_Matchmaking_MatchFound message when a
             match is found. Call Room.Join2() on the returned room. The response
             contains useful information to display to the user to set expectations for
             how long it will take to get a match.
            
             If the user stops waiting, call Matchmaking.Cancel().
             \param pool The pool to enqueue in.
             \param matchmakingOptions Additional matchmaking configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.EnqueueRoom(System.UInt64,Oculus.Platform.Matchmaking.CustomQuery)">
             DEPRECATED. Please use Matchmaking.EnqueueRoom2() instead.
             \param roomID Returned either from MessageType.Notification_Matchmaking_MatchFound or from Matchmaking.CreateRoom().
             \param customQueryData Optional.  See the "Custom criteria" section above.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.EnqueueRoom2(System.UInt64,Oculus.Platform.MatchmakingOptions)">
             Modes: BROWSE (for Rooms only), ROOM
            
             See the overview documentation above. Enqueue yourself to await an
             available matchmaking room. MessageType.Notification_Matchmaking_MatchFound
             gets enqueued when a match is found.
            
             The response contains useful information to display to the user to set
             expectations for how long it will take to get a match.
            
             If the user stops waiting, call Matchmaking.Cancel().
             \param roomID Returned either from MessageType.Notification_Matchmaking_MatchFound or from Matchmaking.CreateRoom().
             \param matchmakingOptions Additional matchmaking configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.GetAdminSnapshot">
             Modes: QUICKMATCH, BROWSE
            
             Used to debug the state of the current matchmaking pool queue. This is not
             intended to be used in production.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.JoinRoom(System.UInt64,System.Boolean)">
             DEPRECATED. Use ovr_Room_Join2.
             \param roomID ID of a room previously returned from MessageType.Notification_Matchmaking_MatchFound or Matchmaking.Browse().
             \param subscribeToUpdates If true, sends a message with type MessageType.Notification_Room_RoomUpdate when room data changes, such as when users join or leave.
            
        </member>
        <member name="M:Oculus.Platform.Matchmaking.StartMatch(System.UInt64)">
             Modes: QUICKMATCH, BROWSE (+ Skill Pool)
            
             For pools with skill-based matching. See overview documentation above.
            
             Call after calling Room.Join2() when the players are present to begin a
             rated match for which you plan to report the results (using
             Matchmaking.ReportResultInsecure()).
            
        </member>
        <member name="M:Oculus.Platform.Leaderboards.GetEntries(System.String,System.Int32,Oculus.Platform.LeaderboardFilterType,Oculus.Platform.LeaderboardStartAt)">
             Requests a block of Leaderboard Entries.
             \param leaderboardName The name of the leaderboard whose entries to return.
             \param limit Defines the maximum number of entries to return.
             \param filter Allows you to restrict the returned values by friends.
             \param startAt Defines whether to center the query on the user or start at the top of the leaderboard.
            
        </member>
        <member name="M:Oculus.Platform.Leaderboards.GetEntriesAfterRank(System.String,System.Int32,System.UInt64)">
             Requests a block of leaderboard Entries.
             \param leaderboardName The name of the leaderboard.
             \param limit The maximum number of entries to return.
             \param afterRank The position after which to start.  For example, 10 returns leaderboard results starting with the 11th user.
            
        </member>
        <member name="M:Oculus.Platform.Leaderboards.WriteEntry(System.String,System.Int64,System.Byte[],System.Boolean)">
             Writes a single entry to a leaderboard.
             \param leaderboardName The leaderboard for which to write the entry.
             \param score The score to write.
             \param extraData A 2KB custom data field that is associated with the leaderboard entry. This can be a game replay or anything that provides more detail about the entry to the viewer.
             \param forceUpdate If true, the score always updates.  This happens even if it is not the user's best score.
            
        </member>
        <member name="M:Oculus.Platform.Voip.SetSystemVoipSuppressed(System.Boolean)">
             Sets whether SystemVoip should be suppressed so that this app's Voip can
             use the mic and play incoming Voip audio.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.AddCount(System.String,System.UInt64)">
             Add 'count' to the achievement with the given name. This must be a COUNT
             achievement.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.AddFields(System.String,System.String)">
             Unlock fields of a BITFIELD achievement.
             \param name The name of the achievement to unlock
             \param fields A string containing either '0' or '1' characters. Every '1' will unlock the field in the corresponding position.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.GetAllDefinitions">
             Request all achievement definitions for the app.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.GetAllProgress">
             Request the progress for the user on all achievements in the app.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.GetDefinitionsByName(System.String[])">
             Request the achievement definitions that match the specified names.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.GetProgressByName(System.String[])">
             Request the user's progress on the specified achievements.
            
        </member>
        <member name="M:Oculus.Platform.Achievements.Unlock(System.String)">
             Unlock the achievement with the given name. This can be of any achievement
             type.
            
        </member>
        <member name="M:Oculus.Platform.Application.GetVersion">
             Requests version information, including the currently installed and latest
             available version name and version code.
            
        </member>
        <member name="M:Oculus.Platform.Application.LaunchOtherApp(System.UInt64,Oculus.Platform.ApplicationOptions)">
             Launches a different application in the user's library. If the user does
             not have that application installed, they will be taken to that app's page
             in the Oculus Store
             \param appID The ID of the app to launch
             \param deeplink_options Additional configuration for this requests. Optional.
            
        </member>
        <member name="M:Oculus.Platform.AssetFile.Delete(System.UInt64)">
             Removes an previously installed asset file from the device by its ID.
             Returns an object containing the asset file ID and a success flag.
             \param assetFileID The asset file ID
            
        </member>
        <member name="M:Oculus.Platform.AssetFile.Download(System.UInt64)">
             Downloads an asset file by its ID on demand. Returns an object containing
             filepath on the file system. Sends periodic
             MessageType.Notification_AssetFile_DownloadUpdate to track the downloads.
             \param assetFileID The asset file ID
            
        </member>
        <member name="M:Oculus.Platform.AssetFile.DownloadCancel(System.UInt64)">
             Cancels a previously spawned download request for an asset file by its ID.
             Returns an object containing asset file ID, and the success flag.
             \param assetFileID The asset file ID
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.Delete(System.String,System.String)">
             Deletes the specified save data buffer. Conflicts are handled just like
             Saves.
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.Load(System.String,System.String)">
             Loads the saved entry for the specified bucket and key. If a conflict
             exists with the key then an error message is returned.
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.LoadBucketMetadata(System.String)">
             Loads all the metadata for the saves in the specified bucket, including
             conflicts.
             \param bucket The name of the storage bucket.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.LoadConflictMetadata(System.String,System.String)">
             Loads the metadata for this bucket-key combination that need to be manually
             resolved.
             \param bucket The name of the storage bucket
             \param key The key for this saved data.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.LoadHandle(System.String)">
             Loads the data specified by the storage handle.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.LoadMetadata(System.String,System.String)">
             load the metadata for the specified key
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.ResolveKeepLocal(System.String,System.String,System.String)">
             Selects the local save for manual conflict resolution.
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
             \param remoteHandle The handle of the remote that the local file was resolved against.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.ResolveKeepRemote(System.String,System.String,System.String)">
             Selects the remote save for manual conflict resolution.
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
             \param remoteHandle The handle of the remote.
            
        </member>
        <member name="M:Oculus.Platform.CloudStorage.Save(System.String,System.String,System.Byte[],System.Int64,System.String)">
             Note: Cloud Storage is only available for Rift apps.
            
             Send a save data buffer to the platform. CloudStorage.Save() passes a
             pointer to your data in an async call. You need to maintain the save data
             until you receive the message indicating that the save was successful.
            
             If the data is destroyed or modified prior to receiving that message the
             data will not be saved.
             \param bucket The name of the storage bucket.
             \param key The name for this saved data.
             \param data Start of the data block.
             \param counter Optional. Counter used for user data or auto-deconfliction.
             \param extraData Optional. String data that isn't used by the platform.
            
        </member>
        <member name="M:Oculus.Platform.Entitlements.IsUserEntitledToApplication">
             Returns whether the current user is entitled to the current app.
            
        </member>
        <member name="M:Oculus.Platform.IAP.ConsumePurchase(System.String)">
             Allow the consumable IAP product to be purchased again. Conceptually, this
             indicates that the item was used or consumed.
            
        </member>
        <member name="M:Oculus.Platform.IAP.GetProductsBySKU(System.String[])">
             Retrieve a list of IAP products that can be purchased.
             \param skus The SKUs of the products to retrieve.
            
        </member>
        <member name="M:Oculus.Platform.IAP.GetViewerPurchases">
             Retrieve a list of Purchase that the Logged-In-User has made. This list
             will also contain consumable purchases that have not been consumed.
            
        </member>
        <member name="M:Oculus.Platform.IAP.LaunchCheckoutFlow(System.String)">
             Launch the checkout flow to purchase the existing product. Oculus Home
             tries handle and fix as many errors as possible. Home returns the
             appropriate error message and how to resolveit, if possible. Returns a
             purchase on success, empty purchase on cancel, and an error on error.
             \param sku IAP sku for the item the user wishes to purchase.
            
        </member>
        <member name="M:Oculus.Platform.Media.ShareToFacebook(System.String,System.String,Oculus.Platform.MediaContentType)">
             Launch the Share to Facebook modal via a deeplink to Home on Gear VR,
             allowing users to share local media files to Facebook. Accepts a
             postTextSuggestion string for the default text of the Facebook post.
             Requires a filePath string as the path to the image to be shared to
             Facebook. This image should be located in your app's internal storage
             directory. Requires a contentType indicating the type of media to be shared
             (only 'photo' is currently supported.)
             \param postTextSuggestion this text will prepopulate the facebook status text-input box within the share modal
             \param filePath path to the file to be shared to facebook
             \param contentType content type of the media to be shared
            
        </member>
        <member name="M:Oculus.Platform.Notifications.GetRoomInviteNotifications">
             Retrieve a list of all pending room invites for your application (for
             example, notifications that may have been sent before the user launched
             your game). You can also get push notifications with
             MessageType.Notification_Room_InviteReceived.
            
        </member>
        <member name="M:Oculus.Platform.Notifications.MarkAsRead(System.UInt64)">
             Mark a notification as read. This causes it to disappear from the Universal
             Menu, the Oculus App, Oculus Home, and in-app retrieval.
            
        </member>
        <member name="M:Oculus.Platform.Parties.GetCurrent">
             Load the party the current user is in.
            
        </member>
        <member name="M:Oculus.Platform.Users.Get(System.UInt64)">
             Retrieve the user with the given ID. This might fail if the ID is invalid
             or the user is blocked.
            
             NOTE: Users will have a unique ID per application.
             \param userID User ID retrieved with this application.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetAccessToken">
             Return an access token for this user, suitable for making REST calls
             against graph.oculus.com.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetLoggedInUser">
             Retrieve the currently signed in user. This call is available offline.
            
             NOTE: This will not return the user's presence as it should always be
             'online' in your application.
            
             NOTE: Users will have a unique ID per application.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetLoggedInUserFriends">
             Retrieve a list of the logged in user's friends.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetLoggedInUserFriendsAndRooms">
             Retrieve a list of the logged in user's friends and any rooms they might be
             in.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetLoggedInUserRecentlyMetUsersAndRooms(Oculus.Platform.UserOptions)">
             Returns a list of users that the logged in user was in a room with
             recently, sorted by relevance, along with any rooms they might be in. All
             you need to do to use this method is to use our Rooms API, and we will
             track the number of times users are together, their most recent encounter,
             and the amount of time they spend together.
            
             Customization can be done via UserOptions. Create this object with
             UserOptions(). The params that could be used are:
            
             1. UserOptions.SetTimeWindow() - how recently should the users have played?
             The default is TimeWindow.ThirtyDays.
            
             2. UserOptions.SetMaxUsers() - we will limit the number of results
             returned. By default, the number is unlimited, but the server may choose to
             limit results for performance reasons.
             \param userOptions Additional configuration for this request. Optional.
            
        </member>
        <member name="M:Oculus.Platform.Users.GetOrgScopedID(System.UInt64)">
             returns an ovrID which is unique per org. allows different apps within the
             same org to identify the user.
             \param userID to load the org scoped id of
            
        </member>
        <member name="M:Oculus.Platform.Users.GetSdkAccounts">
             Returns all accounts belonging to this user. Accounts are the Oculus user
             and x-users that are linked to this user.
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:Oculus.Platform.Users.GetUserProof" -->
        <member name="M:Oculus.Platform.Users.LaunchProfile(System.UInt64)">
             Launch the profile of the given user on Gear VR. The profile surfaces
             information about the user and supports relevant actions that the viewer
             may take on that user, e.g. sending a friend request.
             \param userID User ID for profile being viewed
            
        </member>
        <member name="M:Oculus.Platform.Request.RunCallbacks(System.UInt32)">
            This will run callbacks on all messages that returned from the server.
            If too many message are coming back at once, then a limit can be passed in
            as an arg to limit the number of messages to run callbacks on at a time
        </member>
        <member name="F:Oculus.Platform.SendPolicy.Unreliable">
             Sends a message using an unreliable data channel (UDP-based). No delivery
             or ordering guarantees are provided. Sending will fail unless a connection
             to the peer is already established, either via a previous call to
             Net.SendPacket() or an explicit Net.Connect().
            
             Ideally, each message should fit into a single packet. Therefore, it is
             recommended to keep them under 1200 bytes.
        </member>
        <member name="F:Oculus.Platform.SendPolicy.Reliable">
            Messages are delivered reliably and in order. The networking layer retries
            until each message is acknowledged by the peer. Outgoing messages are
            buffered until a working connection to the peer is established.
        </member>
        <member name="F:Oculus.Platform.UserOrdering.None">
            No preference for ordering (could be in any or no order)
        </member>
        <member name="F:Oculus.Platform.UserOrdering.PresenceAlphabetical">
            Orders by online users first and then offline users. Within each group the
            users are ordered alphabetically by display name
        </member>
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarMeshVertex.blendWeights" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarMeshVertexV2.blendWeights" -->
        <member name="T:ovrAvatarMeshAssetDataV2">
             Mesh Asset Data V2
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.albedoTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.albedoMultiplier" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.metallicnessTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.glossinessScale" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.normalTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.heightTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.occlusionTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.emissionTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.emissionMultiplier" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.detailMaskTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.detailAlbedoTextureID" -->
        <!-- Badly formed XML comment ignored for member "F:ovrAvatarPBSMaterialState.detailNormalTextureID" -->
        <!-- Badly formed XML comment ignored for member "M:ovrAvatarPBSMaterialState.VectorEquals(UnityEngine.Vector4,UnityEngine.Vector4)" -->
        <member name="M:EnableSwitch.SetActive(System.Int32)">
            <summary>
            Sets the active GameObject
            </summary>
            <returns><c>true</c>, if active was set, <c>false</c> otherwise.</returns>
            <param name="target">Target.</param>
        </member>
        <member name="M:LipSyncDemo_SetCurrentTarget.SetCurrentTarget">
            <summary>
            Sets the current target.
            </summary>
        </member>
        <member name="M:LipSyncDemo_SetCurrentTarget.LocalTouchEventCallback(OVRTouchpad.TouchEvent)">
            <summary>
            Local touch event callback.
            </summary>
            <param name="touchEvent">Touch event.</param>
        </member>
        <member name="P:OVRLipSyncDebugConsole.instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Init">
            <summary>
            Init this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Log(System.String)">
            <summary>
            Log the specified message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Log(System.String,UnityEngine.Color)">
            <summary>
            Log the specified message and color.
            </summary>
            <param name="message">Message.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:OVRLipSyncDebugConsole.Clear">
            <summary>
            Clear this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncDebugConsole.ClearTimeout(System.Single)">
            <summary>
            Calls clear after a certain time.
            </summary>
            <param name="timeToClear">Time to clear.</param>
        </member>
        <member name="M:OVRLipSyncDebugConsole.AddMessage(System.String,UnityEngine.Color)">
            <summary>
            Adds the message.
            </summary>
            <param name="message">Message.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:OVRLipSyncDebugConsole.ClearMessages">
            <summary>
            Clears the messages.
            </summary>
        </member>
        <member name="M:OVRLipSyncDebugConsole.SetClearTimeout(System.Single)">
            <summary>
            Sets the clear timeout.
            </summary>
            <param name="timeout">Timeout.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OVRLipSyncDebugConsole.Prune" -->
        <member name="M:OVRLipSyncDebugConsole.Display">
            <summary>
            Display this instance.
            </summary>
        </member>
        <member name="M:OVRMessenger.MarkAsPermanent(System.String)">
            <summary>
            Marks a certain message as permanent.
            </summary>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:OVRMessenger.Cleanup">
            <summary>
            Cleanup this instance.
            </summary>
        </member>
        <member name="M:OVRMessenger.PrintEventTable">
            <summary>
            Prints the event table.
            </summary>
        </member>
        <member name="M:OVRMessenger.OnListenerAdding(System.String,System.Delegate)">
            <summary>
            Raises the listener adding event.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="listenerBeingAdded">Listener being added.</param>
        </member>
        <member name="M:OVRMessenger.OnListenerRemoving(System.String,System.Delegate)">
            <summary>
            Raises the listener removing event.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="listenerBeingRemoved">Listener being removed.</param>
        </member>
        <member name="M:OVRMessenger.OnListenerRemoved(System.String)">
            <summary>
            Raises the listener removed event.
            </summary>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:OVRMessenger.OnBroadcasting(System.String)">
            <summary>
            Raises the broadcasting event.
            </summary>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:OVRMessenger.CreateBroadcastSignatureException(System.String)">
            <summary>
            Creates the broadcast signature exception.
            </summary>
            <returns>The broadcast signature exception.</returns>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:OVRMessenger.AddListener(System.String,OVRCallback)">
            <summary>
            No parameters.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
        </member>
        <member name="M:OVRMessenger.AddListener``1(System.String,OVRCallback{``0})">
            <summary>
            Single parameter.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:OVRMessenger.AddListener``2(System.String,OVRCallback{``0,``1})">
            <summary>
            Two parameters.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="U">The 2nd type parameter.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OVRMessenger.AddListener``3(System.String,OVRCallback{``0,``1,``2})" -->
        <member name="M:OVRMessenger.RemoveListener(System.String,OVRCallback)">
            <summary>
            No parameters
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
        </member>
        <member name="M:OVRMessenger.RemoveListener``1(System.String,OVRCallback{``0})">
            <summary>
            Single parameter
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:OVRMessenger.RemoveListener``2(System.String,OVRCallback{``0,``1})">
            <summary>
            Two parameters
            </summary>
            <param name="eventType">Event type.</param>
            <param name="handler">Handler.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="U">The 2nd type parameter.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OVRMessenger.RemoveListener``3(System.String,OVRCallback{``0,``1,``2})" -->
        <member name="M:OVRMessenger.Broadcast(System.String)">
            <summary>
            Broadcast the specified eventType.
            </summary>
            <param name="eventType">Event type.</param>
        </member>
        <member name="M:OVRMessenger.Broadcast``1(System.String,``0)">
            <summary>
            Broadcast the specified eventType and arg1.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="arg1">Arg1.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:OVRMessenger.Broadcast``2(System.String,``0,``1)">
            <summary>
            Broadcast the specified eventType, arg1 and arg2.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="arg1">Arg1.</param>
            <param name="arg2">Arg2.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="U">The 2nd type parameter.</typeparam>
        </member>
        <member name="M:OVRMessenger.Broadcast``3(System.String,``0,``1,``2)">
            <summary>
            Broadcast the specified eventType, arg1, arg2 and arg3.
            </summary>
            <param name="eventType">Event type.</param>
            <param name="arg1">Arg1.</param>
            <param name="arg2">Arg2.</param>
            <param name="arg3">Arg3.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
            <typeparam name="U">The 2nd type parameter.</typeparam>
            <typeparam name="V">The 3rd type parameter.</typeparam>
        </member>
        <member name="T:MessengerHelper">
            <summary>
            Messenger helper.
            This manager will ensure that the messenger's eventTable will be cleaned up upon loading of a new level.
            </summary>
        </member>
        <member name="M:MessengerHelper.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:MessengerHelper.OnDisable">
            <summary>
            Raises the disable event.
            </summary>
        </member>
        <member name="T:OVRLipSync">
             <summary>
             OVRLipSync interfaces into the Oculus lip-sync engine. This component should be added
             into the scene once. 
            
             </summary>
        </member>
        <member name="T:OVRLipSync.Flags">
            Flags
        </member>
        <member name="T:OVRLipSync.Frame">
            NOTE: Opaque typedef for lip-sync context is an unsigned int (uint)
            Current phoneme frame results
        </member>
        <member name="M:OVRLipSync.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRLipSync.OnDestroy">
            <summary>
            Raises the destroy event.
            </summary>
        </member>
        <member name="M:OVRLipSync.IsInitialized">
            <summary>
            Determines if is initialized.
            </summary>
            <returns><c>true</c> if is initialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:OVRLipSync.CreateContext(System.UInt32@,OVRLipSync.ContextProviders)">
            <summary>
            Creates a lip-sync context.
            </summary>
            <returns>error code</returns>
            <param name="context">Context.</param>
            <param name="provider">Provider.</param>
        </member>
        <member name="M:OVRLipSync.DestroyContext(System.UInt32)">
            <summary>
            Destroy a lip-sync context.
            </summary>
            <returns>The context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:OVRLipSync.ResetContext(System.UInt32)">
            <summary>
            Resets the context.
            </summary>
            <returns>error code</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:OVRLipSync.SendSignal(System.UInt32,OVRLipSync.Signals,System.Int32,System.Int32)">
            <summary>
            Sends a signal to the lip-sync engine.
            </summary>
            <returns>error code</returns>
            <param name="context">Context.</param>
            <param name="signal">Signal.</param>
            <param name="arg1">Arg1.</param>
            <param name="arg2">Arg2.</param>
        </member>
        <member name="M:OVRLipSync.ProcessFrame(System.UInt32,System.Single[],OVRLipSync.Flags,OVRLipSync.Frame)">
            <summary>
            Processes the frame.
            </summary>
            <returns>error code</returns>
            <param name="context">Context.</param>
            <param name="monoBuffer">Mono buffer.</param>
            <param name="delayCompensate">If set to <c>true</c> delay compensate.</param>
            <param name="frame">Frame.</param>
        </member>
        <member name="M:OVRLipSync.ProcessFrameInterleaved(System.UInt32,System.Single[],OVRLipSync.Flags,OVRLipSync.Frame)">
            <summary>
            Processes the frame interleaved.
            </summary>
            <returns>The frame interleaved.</returns>
            <param name="context">Context.</param>
            <param name="audioBuffer">Audio buffer.</param>
            <param name="delayCompensate">If set to <c>true</c> delay compensate.</param>
            <param name="frame">Frame.</param>
        </member>
        <member name="M:OVRLipSyncContext.Start">
            <summary>
            Start this instance.
            Note: make sure to always have a Start function for classes that have editor scripts.
            </summary>
        </member>
        <member name="M:OVRLipSyncContext.Update">
            <summary>
            Run processes that need to be updated in our game thread
            </summary>
        </member>
        <member name="M:OVRLipSyncContext.OnAudioFilterRead(System.Single[],System.Int32)">
            <summary>
            Raises the audio filter read event.
            </summary>
            <param name="data">Data.</param>
            <param name="channels">Channels.</param>
        </member>
        <member name="M:OVRLipSyncContext.DebugShowVisemes">
            <summary>
            Debugs the show visemes.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextBase.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextBase.OnDestroy">
            <summary>
            Raises the destroy event.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextBase.GetCurrentPhonemeFrame">
            <summary>
            Gets the current phoneme frame (lock and copy current frame to caller frame)
            </summary>
            <returns>error code</returns>
            <param name="inFrame">In frame.</param>
        </member>
        <member name="M:OVRLipSyncContextBase.ResetContext">
            <summary>
            Resets the context.
            </summary>
            <returns>error code</returns>
        </member>
        <member name="M:OVRLipSyncContextCanned.Update">
            <summary>
            Run processes that need to be updated in our game thread
            </summary>
        </member>
        <member name="M:OVRLipSyncContextMorphTarget.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextMorphTarget.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextMorphTarget.CheckForKeys">
            <summary>
            Sends the signals.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextMorphTarget.SetVisemeToMorphTarget(OVRLipSync.Frame)">
            <summary>
            Sets the viseme to morph target.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextMorphTarget.CheckVisemeKey(UnityEngine.KeyCode,System.Int32,System.Int32)">
            <summary>
            Sends the viseme signal.
            </summary>
            <param name="key">Key.</param>
            <param name="viseme">Viseme.</param>
            <param name="arg1">Arg1.</param>
        </member>
        <member name="M:OVRLipSyncContextTextureFlip.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextTextureFlip.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncContextTextureFlip.SetVisemeToTexture">
            <summary>
            Sets the viseme to texture.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.OnApplicationFocus(System.Boolean)">
            <summary>
            Raises the application focus event.
            </summary>
            <param name="focus">If set to <c>true</c> focus.</param>
        </member>
        <member name="M:OVRLipSyncMicInput.OnApplicationPause(System.Boolean)">
            <summary>
            Raises the application pause event.
            </summary>
            <param name="focus">If set to <c>true</c> focus.</param>
        </member>
        <member name="M:OVRLipSyncMicInput.OnGUI">
            <summary>
            Raises the GU event.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.MicDeviceGUI(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Mics the device GU.
            </summary>
            <param name="left">Left.</param>
            <param name="top">Top.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="buttonSpaceTop">Button space top.</param>
            <param name="buttonSpaceLeft">Button space left.</param>
        </member>
        <member name="M:OVRLipSyncMicInput.GetMicCaps">
            <summary>
            Gets the mic caps.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.StartMicrophone">
            <summary>
            Starts the microphone.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.StopMicrophone">
            <summary>
            Stops the microphone.
            </summary>
        </member>
        <member name="M:OVRLipSyncMicInput.GetAveragedVolume">
            <summary>
            Gets the averaged volume.
            </summary>
            <returns>The averaged volume.</returns>
        </member>
        <member name="T:MouseLook">
            MouseLook rotates the transform based on the mouse delta.
            Minimum and Maximum values can be used to constrain the possible rotation
            To make an FPS style character:
            - Create a capsule.
            - Add the MouseLook script to the capsule.
              -> Set the mouse look to use LookX. (You want to only turn character but not tilt it)
            - Add FPSInputController script to the capsule
              -> A CharacterMotor and a CharacterController component will be automatically added.
            - Create a camera. Make the camera a child of the capsule. Reset it's transform.
            - Add a MouseLook script to the camera.
              -> Set the mouse look to use LookY. (You want the camera to tilt up and down like a head. The character already turns.)
        </member>
        <member name="M:ONSPReflectionZone.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:ONSPReflectionZone.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:ONSPReflectionZone.OnTriggerEnter(UnityEngine.Collider)">
            <summary>
            Raises the trigger enter event.
            </summary>
            <param name="other">Other.</param>
        </member>
        <member name="M:ONSPReflectionZone.OnTriggerExit(UnityEngine.Collider)">
            <summary>
            Raises the trigger exit event.
            </summary>
            <param name="other">Other.</param>
        </member>
        <member name="M:ONSPReflectionZone.CheckForAudioListener(UnityEngine.GameObject)">
            <summary>
            Checks for audio listener.
            </summary>
            <returns><c>true</c>, if for audio listener was checked, <c>false</c> otherwise.</returns>
            <param name="gameObject">Game object.</param>
        </member>
        <member name="M:ONSPReflectionZone.PushCurrentMixerShapshot">
            <summary>
            Pushs the current mixer snapshot onto the snapshot stack
            </summary>
        </member>
        <member name="M:ONSPReflectionZone.PopCurrentMixerSnapshot">
            <summary>
            Pops the current reflection values from reflectionsList stack.
            </summary>
        </member>
        <member name="M:ONSPReflectionZone.SetReflectionValues">
            <summary>
            Sets the reflection values. This is done when entering a zone (use zone values).
            </summary>
        </member>
        <member name="M:ONSPReflectionZone.SetReflectionValues(ReflectionSnapshot@)">
            <summary>
            Sets the reflection values. This is done when exiting a zone (use popped values).
            </summary>
            <param name="rm">Rm.</param>
        </member>
        <member name="M:ONSPAmbisonicsNative.OnEnable">
            <summary>
            OnEnable this instance.
            </summary>
        </member>
        <member name="M:ONSPAmbisonicsNative.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:ONSPAudioSource.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:ONSPAudioSource.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:ONSPAudioSource.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:ONSPAudioSource.SetParameters(UnityEngine.AudioSource@)">
            <summary>
            Sets the parameters.
            </summary>
            <param name="source">Source.</param>
        </member>
        <member name="M:ONSPAudioSource.OnDrawGizmos">
            <summary>
            
            </summary>
        </member>
        <member name="M:ONSPAudioSource.OnDestroy">
            <summary>
            
            </summary>
        </member>
        <member name="M:ONSPVersion.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:ONSPVersion.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:ONSPVersion.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:VoiceModDemo_Logic.SetCurrentTarget">
            <summary>
            Sets the current target.
            </summary>
        </member>
        <member name="M:VoiceModDemo_Logic.LocalTouchEventCallback(OVRTouchpad.TouchEvent)">
            <summary>
            Local touch event callback.
            </summary>
            <param name="touchEvent">Touch event.</param>
        </member>
        <member name="M:VoiceModDemo_Logic.UpdateModelScale">
            <summary>
            Updates the model scale.
            </summary>
        </member>
        <member name="P:OVRDebugConsole.instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="M:OVRDebugConsole.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRDebugConsole.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRDebugConsole.Init">
            <summary>
            Init this instance.
            </summary>
        </member>
        <member name="M:OVRDebugConsole.Log(System.String)">
            <summary>
            Log the specified message.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="M:OVRDebugConsole.Log(System.String,UnityEngine.Color)">
            <summary>
            Log the specified message and color.
            </summary>
            <param name="message">Message.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:OVRDebugConsole.Clear">
            <summary>
            Clear this instance.
            </summary>
        </member>
        <member name="M:OVRDebugConsole.ClearTimeout(System.Single)">
            <summary>
            Calls clear after a certain time.
            </summary>
            <param name="timeToClear">Time to clear.</param>
        </member>
        <member name="M:OVRDebugConsole.AddMessage(System.String,UnityEngine.Color)">
            <summary>
            Adds the message.
            </summary>
            <param name="message">Message.</param>
            <param name="color">Color.</param>
        </member>
        <member name="M:OVRDebugConsole.ClearMessages">
            <summary>
            Clears the messages.
            </summary>
        </member>
        <member name="M:OVRDebugConsole.SetClearTimeout(System.Single)">
            <summary>
            Sets the clear timeout.
            </summary>
            <param name="timeout">Timeout.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OVRDebugConsole.Prune" -->
        <member name="M:OVRDebugConsole.Display">
            <summary>
            Display this instance.
            </summary>
        </member>
        <member name="M:OVRMicInput.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRMicInput.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:OVRMicInput.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRMicInput.OnApplicationFocus(System.Boolean)">
            <summary>
            Raises the application focus event.
            </summary>
            <param name="focus">If set to <c>true</c> focus.</param>
        </member>
        <member name="M:OVRMicInput.OnApplicationPause(System.Boolean)">
            <summary>
            Raises the application pause event.
            </summary>
            <param name="focus">If set to <c>true</c> focus.</param>
        </member>
        <member name="M:OVRMicInput.OnGUI">
            <summary>
            Raises the GU event.
            </summary>
        </member>
        <member name="M:OVRMicInput.MicDeviceGUI(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Mics the device GU.
            </summary>
            <param name="left">Left.</param>
            <param name="top">Top.</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <param name="buttonSpaceTop">Button space top.</param>
            <param name="buttonSpaceLeft">Button space left.</param>
        </member>
        <member name="M:OVRMicInput.GetMicCaps">
            <summary>
            Gets the mic caps.
            </summary>
        </member>
        <member name="M:OVRMicInput.StartMicrophone">
            <summary>
            Starts the microphone.
            </summary>
        </member>
        <member name="M:OVRMicInput.StopMicrophone">
            <summary>
            Stops the microphone.
            </summary>
        </member>
        <member name="M:OVRMicInput.GetAveragedVolume">
            <summary>
            Gets the averaged volume.
            </summary>
            <returns>The averaged volume.</returns>
        </member>
        <member name="T:OVRVoiceMod">
             <summary>
             OVRVoiceMod interfaces into the Oculus voice-mod engine. This component should be added
             into the scene once. 
            
             </summary>
        </member>
        <member name="T:OVRVoiceMod.ovrViceModFlag">
            Flags (unused at this time)
        </member>
        <member name="F:OVRVoiceMod.strOVRLS">
            NOTE: Opaque typedef for voice mod context is an unsigned int (uint)
        </member>
        <member name="M:OVRVoiceMod.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRVoiceMod.Start">
            <summary>
            Start this instance.
            Note: make sure to always have a Start function for classes that have editor scripts.
            </summary>
        </member>
        <member name="M:OVRVoiceMod.Update">
            <summary>
            Run processes that need to be updated in our game thread
            </summary>
        </member>
        <member name="M:OVRVoiceMod.OnDestroy">
            <summary>
            Raises the destroy event.
            </summary>
        </member>
        <member name="M:OVRVoiceMod.IsInitialized">
            <summary>
            Determines if is initialized.
            </summary>
            <returns><c>true</c> if is initialized; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:OVRVoiceMod.CreateContext(System.UInt32@)">
            <summary>
            Creates the context.
            </summary>
            <returns>The context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:OVRVoiceMod.DestroyContext(System.UInt32)">
            <summary>
            Destroies the context.
            </summary>
            <returns>The context.</returns>
            <param name="context">Context.</param>
        </member>
        <member name="M:OVRVoiceMod.SendParameter(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Sends the parameter.
            </summary>
            <returns>The parameter.</returns>
            <param name="context">Context.</param>
            <param name="parameter">Parameter.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:OVRVoiceMod.ProcessFrame(System.UInt32,System.Single[])">
            <summary>
            Processes the frame.
            </summary>
            <returns>The frame.</returns>
            <param name="context">Context.</param>
            <param name="audioBuffer">Audio buffer.</param>
        </member>
        <member name="M:OVRVoiceMod.ProcessFrameInterleaved(System.UInt32,System.Single[])">
            <summary>
            Processes the frame interleaved.
            </summary>
            <returns>The frame interleaved.</returns>
            <param name="context">Context.</param>
            <param name="audioBuffer">Audio buffer.</param>
        </member>
        <member name="M:OVRVoiceMod.GetAverageAbsVolume(System.UInt32)">
            <summary>
            Gets the average abs volume.
            </summary>
            <returns>The average abs volume.</returns>
            <param name="context">Context.</param>
            <param name="volume">Volume.</param>
        </member>
        <member name="M:OVRVoiceModContext.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRVoiceModContext.Start">
            <summary>
            Start this instance.
            Note: make sure to always have a Start function for classes that have editor scripts.
            </summary>
        </member>
        <member name="M:OVRVoiceModContext.Update">
            <summary>
            Run processes that need to be updated in our game thread
            </summary>
        </member>
        <member name="M:OVRVoiceModContext.OnDestroy">
            <summary>
            Raises the destroy event.
            </summary>
        </member>
        <member name="M:OVRVoiceModContext.OnAudioFilterRead(System.Single[],System.Int32)">
            <summary>
            Raises the audio filter read event.
            </summary>
            <param name="data">Data.</param>
            <param name="channels">Channels.</param>
        </member>
        <member name="M:OVRVoiceModContext.SendParameter(OVRVoiceModContext.ovrVoiceModParams,System.Int32)">
            <summary>
            Sends the parameter.
            </summary>
            <returns>The parameter.</returns>
            <param name="parameter">Parameter.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:OVRVoiceModContext.SetPreset(System.Int32)">
            <summary>
            Sets the preset.
            </summary>
            <returns><c>true</c>, if preset was set, <c>false</c> otherwise.</returns>
            <param name="preset">Preset.</param>
        </member>
        <member name="M:OVRVoiceModContext.GetNumPresets">
            <summary>
            Gets the number presets.
            </summary>
            <returns>The number presets.</returns>
        </member>
        <member name="M:OVRVoiceModContext.GetPresetColor(System.Int32)">
            <summary>
            Gets the color of the preset.
            </summary>
            <returns>The preset color.</returns>
            <param name="preset">Preset.</param>
        </member>
        <member name="M:OVRVoiceModContext.GetAverageAbsVolume">
            <summary>
            Gets the average abs volume.
            </summary>
            <returns>The average abs volume.</returns>
        </member>
        <member name="T:OVRMRForegroundCameraManager">
            <summary>
            Helper internal class for foregroundCamera, don't call it outside
            </summary>
        </member>
        <member name="T:OVRBoundary">
            <summary>
            Provides access to the Oculus boundary system.
            </summary>
        </member>
        <member name="T:OVRBoundary.Node">
            <summary>
            Specifies a tracked node that can be queried through the boundary system.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.Node.HandRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.Node.Head" -->
        <member name="T:OVRBoundary.BoundaryType">
            <summary>
            Specifies a boundary type surface.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.BoundaryType.PlayArea" -->
        <member name="T:OVRBoundary.BoundaryTestResult">
            <summary>
            Provides test results of boundary system queries.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.BoundaryTestResult.ClosestDistance" -->
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.BoundaryTestResult.ClosestPoint" -->
        <!-- Badly formed XML comment ignored for member "F:OVRBoundary.BoundaryTestResult.ClosestPointNormal" -->
        <member name="T:OVRBoundary.BoundaryLookAndFeel">
            <summary>
            Specifies the boundary system parameters that can be configured. Can be overridden by the system or user.
            </summary>
        </member>
        <member name="M:OVRBoundary.GetConfigured">
            <summary>
            Returns true if the boundary system is currently configured with valid boundary data.
            </summary>
        </member>
        <member name="M:OVRBoundary.TestNode(OVRBoundary.Node,OVRBoundary.BoundaryType)">
            <summary>
            Returns the results of testing a tracked node against the specified boundary type.
            All points are returned in local tracking space shared by tracked nodes and accessible through OVRCameraRig's trackingSpace anchor.
            </summary>
        </member>
        <member name="M:OVRBoundary.TestPoint(UnityEngine.Vector3,OVRBoundary.BoundaryType)">
            <summary>
            Returns the results of testing a 3d point against the specified boundary type.
            The test point is expected in local tracking space.
            All points are returned in local tracking space shared by tracked nodes and accessible through OVRCameraRig's trackingSpace anchor.
            </summary>
        </member>
        <member name="M:OVRBoundary.SetLookAndFeel(OVRBoundary.BoundaryLookAndFeel)">
            <summary>
            Requests that the visual look and feel of the boundary system be changed as specified. Can be overridden by the system or user.
            </summary>
        </member>
        <member name="M:OVRBoundary.ResetLookAndFeel">
            <summary>
            Resets the visual look and feel of the boundary system to the initial system settings.
            </summary>
        </member>
        <member name="M:OVRBoundary.GetGeometry(OVRBoundary.BoundaryType)">
            <summary>
            Returns an array of 3d points (in clockwise order) that define the specified boundary type.
            All points are returned in local tracking space shared by tracked nodes and accessible through OVRCameraRig's trackingSpace anchor.
            </summary>
        </member>
        <member name="M:OVRBoundary.GetDimensions(OVRBoundary.BoundaryType)">
            <summary>
            Returns a vector that indicates the spatial dimensions of the specified boundary type. (x = width, y = height, z = depth)
            </summary>
        </member>
        <member name="M:OVRBoundary.GetVisible">
            <summary>
            Returns true if the boundary system is currently visible.
            </summary>
        </member>
        <member name="M:OVRBoundary.SetVisible(System.Boolean)">
            <summary>
            Requests that the boundary system visibility be set to the specified value.
            The actual visibility can be overridden by the system (i.e., proximity trigger) or by the user (boundary system disabled)
            </summary>
        </member>
        <member name="T:OVRCameraRig">
            <summary>
            A head-tracked stereoscopic virtual reality camera rig.
            </summary>
        </member>
        <member name="P:OVRCameraRig.leftEyeCamera">
            <summary>
            The left eye camera.
            </summary>
        </member>
        <member name="P:OVRCameraRig.rightEyeCamera">
            <summary>
            The right eye camera.
            </summary>
        </member>
        <member name="P:OVRCameraRig.trackingSpace">
            <summary>
            Provides a root transform for all anchors in tracking space.
            </summary>
        </member>
        <member name="P:OVRCameraRig.leftEyeAnchor">
            <summary>
            Always coincides with the pose of the left eye.
            </summary>
        </member>
        <member name="P:OVRCameraRig.centerEyeAnchor">
            <summary>
            Always coincides with average of the left and right eye poses.
            </summary>
        </member>
        <member name="P:OVRCameraRig.rightEyeAnchor">
            <summary>
            Always coincides with the pose of the right eye.
            </summary>
        </member>
        <member name="P:OVRCameraRig.leftHandAnchor">
            <summary>
            Always coincides with the pose of the left hand.
            </summary>
        </member>
        <member name="P:OVRCameraRig.rightHandAnchor">
            <summary>
            Always coincides with the pose of the right hand.
            </summary>
        </member>
        <member name="P:OVRCameraRig.trackerAnchor">
            <summary>
            Always coincides with the pose of the sensor.
            </summary>
        </member>
        <member name="E:OVRCameraRig.UpdatedAnchors">
            <summary>
            Occurs when the eye pose anchors have been set.
            </summary>
        </member>
        <member name="F:OVRCameraRig.usePerEyeCameras">
            <summary>
            If true, separate cameras will be used for the left and right eyes.
            </summary>
        </member>
        <member name="F:OVRCameraRig.useFixedUpdateForTracking">
            <summary>
            If true, all tracked anchors are updated in FixedUpdate instead of Update to favor physics fidelity.
            \note: If the fixed update rate doesn't match the rendering framerate (OVRManager.display.appFramerate), the anchors will visibly judder.
            </summary>
        </member>
        <member name="T:OVRExtensions">
            <summary>
            Miscellaneous extension methods that any script can use.
            </summary>
        </member>
        <member name="M:OVRExtensions.ToTrackingSpacePose(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>
            Converts the given world-space transform to an OVRPose in tracking space.
            </summary>
        </member>
        <member name="M:OVRExtensions.ToWorldSpacePose(OVRPose)">
            <summary>
            Converts the given pose from tracking-space to world-space.
            </summary>
        </member>
        <member name="M:OVRExtensions.ToHeadSpacePose(UnityEngine.Transform,UnityEngine.Camera)">
            <summary>
            Converts the given world-space transform to an OVRPose in head space.
            </summary>
        </member>
        <member name="T:OVRPose">
            <summary>
            An affine transformation built from a Unity position and orientation.
            </summary>
        </member>
        <member name="P:OVRPose.identity">
            <summary>
            A pose with no translation or rotation.
            </summary>
        </member>
        <member name="F:OVRPose.position">
            <summary>
            The position.
            </summary>
        </member>
        <member name="F:OVRPose.orientation">
            <summary>
            The orientation.
            </summary>
        </member>
        <member name="M:OVRPose.op_Multiply(OVRPose,OVRPose)">
            <summary>
            Multiplies two poses.
            </summary>
        </member>
        <member name="M:OVRPose.Inverse">
            <summary>
            Computes the inverse of the given pose.
            </summary>
        </member>
        <member name="M:OVRPose.flipZ">
            <summary>
            Converts the pose from left- to right-handed or vice-versa.
            </summary>
        </member>
        <member name="T:OVRNativeBuffer">
            <summary>
            Encapsulates an 8-byte-aligned of unmanaged memory.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.#ctor(System.Int32)">
            <summary>
            Creates a buffer of the specified size.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the <see cref="T:OVRNativeBuffer"/> is
            reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.Reset(System.Int32)">
            <summary>
            Reallocates the buffer with the specified new size.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.GetCapacity">
            <summary>
            The current number of bytes in the buffer.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.GetPointer(System.Int32)">
            <summary>
            A pointer to the unmanaged memory in the buffer, starting at the given offset in bytes.
            </summary>
        </member>
        <member name="M:OVRNativeBuffer.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:OVRNativeBuffer"/> object.
            </summary>
            <remarks>Call <see cref="M:OVRNativeBuffer.Dispose"/> when you are finished using the <see cref="T:OVRNativeBuffer"/>. The <see cref="M:OVRNativeBuffer.Dispose"/>
            method leaves the <see cref="T:OVRNativeBuffer"/> in an unusable state. After calling <see cref="M:OVRNativeBuffer.Dispose"/>, you must
            release all references to the <see cref="T:OVRNativeBuffer"/> so the garbage collector can reclaim the memory that
            the <see cref="T:OVRNativeBuffer"/> was occupying.</remarks>
        </member>
        <member name="T:OVRDebugHeadController">
            <summary>
            This is a simple behavior that can be attached to a parent of the CameraRig in order
            to provide movement via the gamepad. This is useful when testing an application in
            the Unity editor without the HMD.
            To use it, create a game object in your scene and drag your CameraRig to be a child
            of the game object. Then, add the OVRDebugHeadController behavior to the game object.
            Alternatively, this behavior can be placed directly on the OVRCameraRig object, but
            that is not guaranteed to work if OVRCameraRig functionality changes in the future.
            In the parent case, the object with OVRDebugHeadController can be thougt of as a 
            platform that your camera is attached to. When the platform moves or rotates, the 
            camera moves or rotates, but the camera can still move independently while "on" the
            platform.
            In general, this behavior should be disabled when not debugging.
            </summary>
        </member>
        <member name="T:OVRDisplay">
            <summary>
            Manages an Oculus Rift head-mounted display (HMD).
            </summary>
        </member>
        <member name="T:OVRDisplay.EyeFov">
            <summary>
            Contains full fov information per eye
            Under Symmetric Fov mode, UpFov == DownFov and LeftFov == RightFov.
            </summary>
        </member>
        <member name="T:OVRDisplay.EyeRenderDesc">
            <summary>
            Specifies the size and field-of-view for one eye texture.
            </summary>
        </member>
        <member name="F:OVRDisplay.EyeRenderDesc.resolution">
            <summary>
            The horizontal and vertical size of the texture.
            </summary>
        </member>
        <member name="F:OVRDisplay.EyeRenderDesc.fov">
            <summary>
            The angle of the horizontal and vertical field of view in degrees.
            For Symmetric FOV interface compatibility
            Note this includes the fov angle from both sides
            </summary>
        </member>
        <member name="F:OVRDisplay.EyeRenderDesc.fullFov">
            <summary>
            The full information of field of view in degrees.
            When Asymmetric FOV isn't enabled, this returns the maximum fov angle
            </summary>
        </member>
        <member name="T:OVRDisplay.LatencyData">
            <summary>
            Contains latency measurements for a single frame of rendering.
            </summary>
        </member>
        <member name="F:OVRDisplay.LatencyData.render">
            <summary>
            The time it took to render both eyes in seconds.
            </summary>
        </member>
        <member name="F:OVRDisplay.LatencyData.timeWarp">
            <summary>
            The time it took to perform TimeWarp in seconds.
            </summary>
        </member>
        <member name="F:OVRDisplay.LatencyData.postPresent">
            <summary>
            The time between the end of TimeWarp and scan-out in seconds.
            </summary>
        </member>
        <member name="M:OVRDisplay.#ctor">
            <summary>
            Creates an instance of OVRDisplay. Called by OVRManager.
            </summary>
        </member>
        <member name="M:OVRDisplay.Update">
            <summary>
            Updates the internal state of the OVRDisplay. Called by OVRManager.
            </summary>
        </member>
        <member name="E:OVRDisplay.RecenteredPose">
            <summary>
            Occurs when the head pose is reset.
            </summary>
        </member>
        <member name="M:OVRDisplay.RecenterPose">
            <summary>
            Recenters the head pose.
            </summary>
        </member>
        <member name="P:OVRDisplay.acceleration">
            <summary>
            Gets the current linear acceleration of the head.
            </summary>
        </member>
        <member name="P:OVRDisplay.angularAcceleration">
            <summary>
            Gets the current angular acceleration of the head.
            </summary>
        </member>
        <member name="P:OVRDisplay.velocity">
            <summary>
            Gets the current linear velocity of the head.
            </summary>
        </member>
        <member name="P:OVRDisplay.angularVelocity">
            <summary>
            Gets the current angular velocity of the head.
            </summary>
        </member>
        <member name="M:OVRDisplay.GetEyeRenderDesc(UnityEngine.XR.XRNode)">
            <summary>
            Gets the resolution and field of view for the given eye.
            </summary>
        </member>
        <member name="P:OVRDisplay.latency">
            <summary>
            Gets the current measured latency values.
            </summary>
        </member>
        <member name="P:OVRDisplay.appFramerate">
            <summary>
            Gets application's frame rate reported by oculus plugin
            </summary>
        </member>
        <member name="P:OVRDisplay.recommendedMSAALevel">
            <summary>
            Gets the recommended MSAA level for optimal quality/performance the current device.
            </summary>
        </member>
        <member name="P:OVRDisplay.displayFrequenciesAvailable">
            <summary>
            Gets the list of available display frequencies supported by this hardware.
            </summary>
        </member>
        <member name="P:OVRDisplay.displayFrequency">
            <summary>
            Gets and sets the current display frequency.
            </summary>
        </member>
        <member name="T:OVRHaptics">
            <summary>
            Plays tactile effects on a tracked VR controller.
            </summary>
        </member>
        <member name="T:OVRHaptics.Config">
            <summary>
            Determines the target format for haptics data on a specific device.
            </summary>
        </member>
        <member name="T:OVRHaptics.OVRHapticsChannel">
            <summary>
            A track of haptics data that can be mixed or sequenced with another track.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsChannel.#ctor(System.UInt32)">
            <summary>
            Constructs a channel targeting the specified output.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsChannel.Preempt(OVRHapticsClip)">
            <summary>
            Cancels any currently-playing clips and immediatly plays the specified clip instead.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsChannel.Queue(OVRHapticsClip)">
            <summary>
            Enqueues the specified clip to play after any currently-playing clips finish.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsChannel.Mix(OVRHapticsClip)">
            <summary>
            Adds the specified clip to play simultaneously to the currently-playing clip(s).
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsChannel.Clear">
            <summary>
            Cancels any currently-playing clips.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsOutput.Process">
            <summary>
            The system calls this each frame to update haptics playback.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsOutput.Preempt(OVRHapticsClip)">
            <summary>
            Immediately plays the specified clip without waiting for any currently-playing clip to finish.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsOutput.Queue(OVRHapticsClip)">
            <summary>
            Enqueues the specified clip to play after any currently-playing clip finishes.
            </summary>
        </member>
        <member name="M:OVRHaptics.OVRHapticsOutput.Mix(OVRHapticsClip)">
            <summary>
            Adds the samples from the specified clip to the ones in the currently-playing clip(s).
            </summary>
        </member>
        <member name="M:OVRHaptics.Process">
            <summary>
            The system calls this each frame to update haptics playback.
            </summary>
        </member>
        <member name="T:OVRHapticsClip">
            <summary>
            A PCM buffer of data for a haptics effect.
            </summary>
        </member>
        <member name="P:OVRHapticsClip.Count">
            <summary>
            The current number of samples in the clip.
            </summary>
        </member>
        <member name="P:OVRHapticsClip.Capacity">
            <summary>
            The maximum number of samples the clip can store.
            </summary>
        </member>
        <member name="P:OVRHapticsClip.Samples">
            <summary>
            The raw haptics data.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.#ctor(System.Int32)">
            <summary>
            Creates a clip with the specified capacity.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a clip with the specified data.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.#ctor(OVRHapticsClip,OVRHapticsClip)">
            <summary>
            Creates a clip by mixing the specified clips.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.#ctor(UnityEngine.AudioClip,System.Int32)">
            <summary>
            Creates a haptics clip from the specified audio clip.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.WriteSample(System.Byte)">
            <summary>
            Adds the specified sample to the end of the clip.
            </summary>
        </member>
        <member name="M:OVRHapticsClip.Reset">
            <summary>
            Clears the clip and resets its size to 0.
            </summary>
        </member>
        <member name="T:OVRInput">
            <summary>
            Provides a unified input system for Oculus controllers and gamepads.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.One" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Two" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Three" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Four" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Start" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Back" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryShoulder" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryThumbstickUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryThumbstickDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryThumbstickLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryThumbstickRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.PrimaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryShoulder" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryThumbstickUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryThumbstickDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryThumbstickLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryThumbstickRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.SecondaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.DpadUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.DpadDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.DpadLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.DpadRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Up" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Down" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Left" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Right" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Button.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.A" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.B" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.X" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.Y" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.Start" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.Back" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LShoulder" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LThumbstickUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LThumbstickDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LThumbstickLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LThumbstickRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.LTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RShoulder" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RThumbstickUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RThumbstickDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RThumbstickLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RThumbstickRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.RTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.DpadUp" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.DpadDown" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.DpadLeft" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.DpadRight" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawButton.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.One" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.Two" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.Three" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.Four" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.PrimaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.PrimaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.PrimaryThumbRest" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.PrimaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.SecondaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.SecondaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.SecondaryThumbRest" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.SecondaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Touch.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.A" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.B" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.X" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.Y" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.LIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.LThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.LThumbRest" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.LTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.RIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.RThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.RThumbRest" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.RTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawTouch.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.NearTouch.PrimaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.NearTouch.PrimaryThumbButtons" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.NearTouch.SecondaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.NearTouch.SecondaryThumbButtons" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.NearTouch.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawNearTouch.LIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawNearTouch.LThumbButtons" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawNearTouch.RIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawNearTouch.RThumbButtons" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawNearTouch.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis1D.PrimaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis1D.PrimaryHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis1D.SecondaryIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis1D.SecondaryHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis1D.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis1D.LIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis1D.LHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis1D.RIndexTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis1D.RHandTrigger" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis1D.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis2D.PrimaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis2D.PrimaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis2D.SecondaryThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis2D.SecondaryTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Axis2D.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis2D.LThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis2D.LTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis2D.RThumbstick" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis2D.RTouchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.RawAxis2D.Any" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.LTouch" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.RTouch" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.Touch" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.Remote" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.Gamepad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.Touchpad" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.LTrackedRemote" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.RTrackedRemote" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.Active" -->
        <!-- Badly formed XML comment ignored for member "F:OVRInput.Controller.All" -->
        <member name="M:OVRInput.#cctor">
            <summary>
            Creates an instance of OVRInput.
            </summary>
        </member>
        <member name="M:OVRInput.Update">
            <summary>
            Updates the internal state of OVRInput. Must be called manually if used independently from OVRManager.
            </summary>
        </member>
        <member name="M:OVRInput.FixedUpdate">
            <summary>
            Updates the internal physics state of OVRInput. Must be called manually if used independently from OVRManager.
            </summary>
        </member>
        <member name="M:OVRInput.GetControllerOrientationTracked(OVRInput.Controller)">
            <summary>
            Returns true if the given Controller's orientation is currently tracked.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return false.
            </summary>
        </member>
        <member name="M:OVRInput.GetControllerPositionTracked(OVRInput.Controller)">
            <summary>
            Returns true if the given Controller's position is currently tracked.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return false.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerPosition(OVRInput.Controller)">
            <summary>
            Gets the position of the given Controller local to its tracking space.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Vector3.zero.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerVelocity(OVRInput.Controller)">
            <summary>
            Gets the linear velocity of the given Controller local to its tracking space.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Vector3.zero.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerAcceleration(OVRInput.Controller)">
            <summary>
            Gets the linear acceleration of the given Controller local to its tracking space.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Vector3.zero.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerRotation(OVRInput.Controller)">
            <summary>
            Gets the rotation of the given Controller local to its tracking space.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Quaternion.identity.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerAngularVelocity(OVRInput.Controller)">
            <summary>
            Gets the angular velocity of the given Controller local to its tracking space in radians per second around each axis.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Quaternion.identity.
            </summary>
        </member>
        <member name="M:OVRInput.GetLocalControllerAngularAcceleration(OVRInput.Controller)">
            <summary>
            Gets the angular acceleration of the given Controller local to its tracking space in radians per second per second around each axis.
            Only supported for Oculus LTouch and RTouch controllers. Non-tracked controllers will return Quaternion.identity.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.Button,OVRInput.Controller)">
            <summary>
            Gets the current state of the given virtual button mask with the given controller mask.
            Returns true if any masked button is down on any masked controller.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.RawButton,OVRInput.Controller)">
            <summary>
            Gets the current state of the given raw button mask with the given controller mask.
            Returns true if any masked button is down on any masked controllers.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.Button,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given virtual button mask with the given controller mask.
            Returns true if any masked button was pressed this frame on any masked controller and no masked button was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.RawButton,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given raw button mask with the given controller mask.
            Returns true if any masked button was pressed this frame on any masked controller and no masked button was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.Button,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given virtual button mask with the given controller mask.
            Returns true if any masked button was released this frame on any masked controller and no other masked button is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.RawButton,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given raw button mask with the given controller mask.
            Returns true if any masked button was released this frame on any masked controller and no other masked button is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.Touch,OVRInput.Controller)">
            <summary>
            Gets the current state of the given virtual touch mask with the given controller mask.
            Returns true if any masked touch is down on any masked controller.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.RawTouch,OVRInput.Controller)">
            <summary>
            Gets the current state of the given raw touch mask with the given controller mask.
            Returns true if any masked touch is down on any masked controllers.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.Touch,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given virtual touch mask with the given controller mask.
            Returns true if any masked touch was pressed this frame on any masked controller and no masked touch was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.RawTouch,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given raw touch mask with the given controller mask.
            Returns true if any masked touch was pressed this frame on any masked controller and no masked touch was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.Touch,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given virtual touch mask with the given controller mask.
            Returns true if any masked touch was released this frame on any masked controller and no other masked touch is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.RawTouch,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given raw touch mask with the given controller mask.
            Returns true if any masked touch was released this frame on any masked controller and no other masked touch is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.NearTouch,OVRInput.Controller)">
            <summary>
            Gets the current state of the given virtual near touch mask with the given controller mask.
            Returns true if any masked near touch is down on any masked controller.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.RawNearTouch,OVRInput.Controller)">
            <summary>
            Gets the current state of the given raw near touch mask with the given controller mask.
            Returns true if any masked near touch is down on any masked controllers.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.NearTouch,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given virtual near touch mask with the given controller mask.
            Returns true if any masked near touch was pressed this frame on any masked controller and no masked near touch was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetDown(OVRInput.RawNearTouch,OVRInput.Controller)">
            <summary>
            Gets the current down state of the given raw near touch mask with the given controller mask.
            Returns true if any masked near touch was pressed this frame on any masked controller and no masked near touch was previously down last frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.NearTouch,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given virtual near touch mask with the given controller mask.
            Returns true if any masked near touch was released this frame on any masked controller and no other masked near touch is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.GetUp(OVRInput.RawNearTouch,OVRInput.Controller)">
            <summary>
            Gets the current up state of the given raw near touch mask with the given controller mask.
            Returns true if any masked near touch was released this frame on any masked controller and no other masked near touch is still down this frame.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.Axis1D,OVRInput.Controller)">
            <summary>
            Gets the current state of the given virtual 1-dimensional axis mask on the given controller mask.
            Returns the value of the largest masked axis across all masked controllers. Values range from 0 to 1.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.RawAxis1D,OVRInput.Controller)">
            <summary>
            Gets the current state of the given raw 1-dimensional axis mask on the given controller mask.
            Returns the value of the largest masked axis across all masked controllers. Values range from 0 to 1.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.Axis2D,OVRInput.Controller)">
            <summary>
            Gets the current state of the given virtual 2-dimensional axis mask on the given controller mask.
            Returns the vector of the largest masked axis across all masked controllers. Values range from -1 to 1.
            </summary>
        </member>
        <member name="M:OVRInput.Get(OVRInput.RawAxis2D,OVRInput.Controller)">
            <summary>
            Gets the current state of the given raw 2-dimensional axis mask on the given controller mask.
            Returns the vector of the largest masked axis across all masked controllers. Values range from -1 to 1.
            </summary>
        </member>
        <member name="M:OVRInput.GetConnectedControllers">
            <summary>
            Returns a mask of all currently connected controller types.
            </summary>
        </member>
        <member name="M:OVRInput.IsControllerConnected(OVRInput.Controller)">
            <summary>
            Returns true if the specified controller type is currently connected.
            </summary>
        </member>
        <member name="M:OVRInput.GetActiveController">
            <summary>
            Returns the current active controller type.
            </summary>
        </member>
        <member name="M:OVRInput.SetControllerVibration(System.Single,System.Single,OVRInput.Controller)">
            <summary>
            Activates vibration with the given frequency and amplitude with the given controller mask.
            Ignored on controllers that do not support vibration. Expected values range from 0 to 1.
            </summary>
        </member>
        <member name="M:OVRInput.RecenterController(OVRInput.Controller)">
            <summary>
            Triggers a recenter to realign the specified controller's virtual pose with the user's real-world pose.
            Only applicable to controllers that require recentering, such as the GearVR Controller.
            Ignored for controllers that do not require recentering.
            </summary>
        </member>
        <member name="M:OVRInput.GetControllerWasRecentered(OVRInput.Controller)">
            <summary>
            Returns true if the specified controller was recentered this frame.
            Only applicable to controllers that require recentering, such as the GearVR Controller.
            Returns false for controllers that do not require recentering.
            </summary>
        </member>
        <member name="M:OVRInput.GetControllerRecenterCount(OVRInput.Controller)">
            <summary>
            Returns the number of times the controller has been recentered this session.
            Useful for detecting recenter events and resetting state such as arm model simulations, etc.
            Wraps around to 0 after 255.
            Only applicable to controllers that require recentering, such as the GearVR Controller.
            Returns 0 for controllers that do not require recentering.
            </summary>
        </member>
        <member name="M:OVRInput.GetControllerBatteryPercentRemaining(OVRInput.Controller)">
            <summary>
            Returns the battery percentage remaining for the specified controller. Values range from 0 to 100.
            Only applicable to controllers that report battery level, such as the GearVR Controller.
            Returns 0 for controllers that do not report battery level.
            </summary>
        </member>
        <member name="T:OVRInput.OVRControllerGamepadMac.AxisGPC">
            <summary> An axis on the gamepad. </summary>
        </member>
        <member name="T:OVRInput.OVRControllerGamepadMac.ButtonGPC">
            <summary> A button on the gamepad. </summary>
        </member>
        <member name="T:OVRLayerAttribute">
            <summary>
            Dummy subtype of PropertyAttribute for custom inspector to use.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OVRLint" -->
        <member name="F:OVRLint.mRecords">
            Use of ONSP reflections (Gear)
            Use of LoadLevelAsync / LoadLevelAdditiveAsync (on Gear, this kills frame rate so dramatically it's probably better to just go to black and load synchronously)
            Use of Linq in non-editor assemblies (common cause of GCs).  Minor: use of foreach.
            Use of Unity WWW (exceptionally high overhead for large file downloads, but acceptable for tiny gets).
            Declared but empty Awake/Start/Update/OnCollisionEnter/OnCollisionExit/OnCollisionStay.  Also OnCollision* star methods that declare the Collision  argument but do not reference it (omitting it short-circuits the collision contact calculation).
        </member>
        <member name="T:OVRManager">
            <summary>
            Configuration data for Oculus virtual reality.
            </summary>
        </member>
        <member name="P:OVRManager.instance">
            <summary>
            Gets the singleton instance.
            </summary>
        </member>
        <member name="P:OVRManager.display">
            <summary>
            Gets a reference to the active display.
            </summary>
        </member>
        <member name="P:OVRManager.tracker">
            <summary>
            Gets a reference to the active sensor.
            </summary>
        </member>
        <member name="P:OVRManager.boundary">
            <summary>
            Gets a reference to the active boundary system.
            </summary>
        </member>
        <member name="P:OVRManager.profile">
            <summary>
            Gets the current profile, which contains information about the user's settings and body dimensions.
            </summary>
        </member>
        <member name="E:OVRManager.HMDAcquired">
            <summary>
            Occurs when an HMD attached.
            </summary>
        </member>
        <member name="E:OVRManager.HMDLost">
            <summary>
            Occurs when an HMD detached.
            </summary>
        </member>
        <member name="E:OVRManager.HMDMounted">
            <summary>
            Occurs when an HMD is put on the user's head.
            </summary>
        </member>
        <member name="E:OVRManager.HMDUnmounted">
            <summary>
            Occurs when an HMD is taken off the user's head.
            </summary>
        </member>
        <member name="E:OVRManager.VrFocusAcquired">
            <summary>
            Occurs when VR Focus is acquired.
            </summary>
        </member>
        <member name="E:OVRManager.VrFocusLost">
            <summary>
            Occurs when VR Focus is lost.
            </summary>
        </member>
        <member name="E:OVRManager.InputFocusAcquired">
            <summary>
            Occurs when Input Focus is acquired.
            </summary>
        </member>
        <member name="E:OVRManager.InputFocusLost">
            <summary>
            Occurs when Input Focus is lost.
            </summary>
        </member>
        <member name="E:OVRManager.AudioOutChanged">
            <summary>
            Occurs when the active Audio Out device has changed and a restart is needed.
            </summary>
        </member>
        <member name="E:OVRManager.AudioInChanged">
            <summary>
            Occurs when the active Audio In device has changed and a restart is needed.
            </summary>
        </member>
        <member name="E:OVRManager.TrackingAcquired">
            <summary>
            Occurs when the sensor gained tracking.
            </summary>
        </member>
        <member name="E:OVRManager.TrackingLost">
            <summary>
            Occurs when the sensor lost tracking.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:OVRManager.HSWDismissed" -->
        <member name="P:OVRManager.isHmdPresent">
            <summary>
            If true, a head-mounted display is connected and present.
            </summary>
        </member>
        <member name="P:OVRManager.audioOutId">
            <summary>
            Gets the audio output device identifier.
            </summary>
            <description>
            On Windows, this is a string containing the GUID of the IMMDevice for the Windows audio endpoint to use.
            </description>
        </member>
        <member name="P:OVRManager.audioInId">
            <summary>
            Gets the audio input device identifier.
            </summary>
            <description>
            On Windows, this is a string containing the GUID of the IMMDevice for the Windows audio endpoint to use.
            </description>
        </member>
        <member name="P:OVRManager.hasVrFocus">
            <summary>
            If true, the app has VR Focus.
            </summary>
        </member>
        <member name="P:OVRManager.hasInputFocus">
            <summary>
            If true, the app has Input Focus.
            </summary>
        </member>
        <member name="P:OVRManager.chromatic">
            <summary>
            If true, chromatic de-aberration will be applied, improving the image at the cost of texture bandwidth.
            </summary>
        </member>
        <member name="F:OVRManager.useRecommendedMSAALevel">
            <summary>
            If true, Unity will use the optimal antialiasing level for quality/performance on the current hardware.
            </summary>
        </member>
        <member name="F:OVRManager._monoscopic">
            <summary>
            If true, both eyes will see the same image, rendered from the center eye pose, saving performance.
            </summary>
        </member>
        <member name="F:OVRManager.enableAdaptiveResolution">
            <summary>
            If true, dynamic resolution will be enabled
            </summary>
        </member>
        <member name="M:OVRManager.IsAdaptiveResSupportedByEngine">
            <summary>
            Adaptive Resolution is based on Unity engine's renderViewportScale/eyeTextureResolutionScale feature 
            But renderViewportScale was broken in an array of Unity engines, this function help to filter out those broken engines
            </summary>
        </member>
        <member name="F:OVRManager.minRenderScale">
            <summary>
            Min RenderScale the app can reach under adaptive resolution mode ( enableAdaptiveResolution = true );
            </summary>
        </member>
        <member name="F:OVRManager.maxRenderScale">
            <summary>
            Max RenderScale the app can reach under adaptive resolution mode ( enableAdaptiveResolution = true );
            </summary>
        </member>
        <member name="F:OVRManager.expandMixedRealityCapturePropertySheet">
            <summary>
            If true, the MixedRealityCapture properties will be displayed
            </summary>
        </member>
        <member name="F:OVRManager.enableMixedReality">
            <summary>
            If true, Mixed Reality mode will be enabled
            </summary>
        </member>
        <member name="F:OVRManager.compositionMethod">
            <summary>
            Composition method
            </summary>
        </member>
        <member name="F:OVRManager.extraHiddenLayers">
            <summary>
            Extra hidden layers
            </summary>
        </member>
        <member name="T:OVRManager.CameraDevice">
            <summary>
            If true, Mixed Reality mode will use direct composition from the first web camera
            </summary>
        </member>
        <member name="F:OVRManager.capturingCameraDevice">
            <summary>
            The camera device for direct composition
            </summary>
        </member>
        <member name="F:OVRManager.flipCameraFrameHorizontally">
            <summary>
            Flip the camera frame horizontally
            </summary>
        </member>
        <member name="F:OVRManager.flipCameraFrameVertically">
            <summary>
            Flip the camera frame vertically
            </summary>
        </member>
        <member name="F:OVRManager.handPoseStateLatency">
            <summary>
            Delay the touch controller pose by a short duration (0 to 0.5 second) to match the physical camera latency
            </summary>
        </member>
        <member name="F:OVRManager.sandwichCompositionRenderLatency">
            <summary>
            Delay the foreground / background image in the sandwich composition to match the physical camera latency. The maximum duration is sandwichCompositionBufferedFrames / {Game FPS}
            </summary>
        </member>
        <member name="F:OVRManager.sandwichCompositionBufferedFrames">
            <summary>
            The number of frames are buffered in the SandWich composition. The more buffered frames, the more memory it would consume.
            </summary>
        </member>
        <member name="F:OVRManager.chromaKeyColor">
            <summary>
            Chroma Key Color
            </summary>
        </member>
        <member name="F:OVRManager.chromaKeySimilarity">
            <summary>
            Chroma Key Similarity
            </summary>
        </member>
        <member name="F:OVRManager.chromaKeySmoothRange">
            <summary>
            Chroma Key Smooth Range
            </summary>
        </member>
        <member name="F:OVRManager.chromaKeySpillRange">
            <summary>
             Chroma Key Spill Range
            </summary>
        </member>
        <member name="F:OVRManager.useDynamicLighting">
            <summary>
            Use dynamic lighting (Depth sensor required)
            </summary>
        </member>
        <member name="F:OVRManager.depthQuality">
            <summary>
            The quality level of depth image. The lighting could be more smooth and accurate with high quality depth, but it would also be more costly in performance.
            </summary>
        </member>
        <member name="F:OVRManager.dynamicLightingSmoothFactor">
            <summary>
            Smooth factor in dynamic lighting. Larger is smoother
            </summary>
        </member>
        <member name="F:OVRManager.dynamicLightingDepthVariationClampingValue">
            <summary>
            The maximum depth variation across the edges. Make it smaller to smooth the lighting on the edges.
            </summary>
        </member>
        <member name="F:OVRManager.virtualGreenScreenType">
            <summary>
            Set the current type of the virtual green screen
            </summary>
        </member>
        <member name="F:OVRManager.virtualGreenScreenTopY">
            <summary>
            Top Y of virtual screen
            </summary>
        </member>
        <member name="F:OVRManager.virtualGreenScreenBottomY">
            <summary>
            Bottom Y of virtual screen
            </summary>
        </member>
        <member name="F:OVRManager.virtualGreenScreenApplyDepthCulling">
            <summary>
            When using a depth camera (e.g. ZED), whether to use the depth in virtual green screen culling.
            </summary>
        </member>
        <member name="F:OVRManager.virtualGreenScreenDepthTolerance">
            <summary>
            The tolerance value (in meter) when using the virtual green screen with a depth camera. Make it bigger if the foreground objects got culled incorrectly.
            </summary>
        </member>
        <member name="P:OVRManager.vsyncCount">
            <summary>
            The number of expected display frames per rendered frame.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:OVRManager.batteryLevel" -->
        <!-- Badly formed XML comment ignored for member "P:OVRManager.batteryTemperature" -->
        <!-- Badly formed XML comment ignored for member "P:OVRManager.batteryStatus" -->
        <!-- Badly formed XML comment ignored for member "P:OVRManager.volumeLevel" -->
        <member name="P:OVRManager.cpuLevel">
            <summary>
            Gets or sets the current CPU performance level (0-2). Lower performance levels save more power.
            </summary>
        </member>
        <member name="P:OVRManager.gpuLevel">
            <summary>
            Gets or sets the current GPU performance level (0-2). Lower performance levels save more power.
            </summary>
        </member>
        <member name="P:OVRManager.isPowerSavingActive">
            <summary>
            If true, the CPU and GPU are currently throttled to save power and/or reduce the temperature.
            </summary>
        </member>
        <member name="P:OVRManager.eyeTextureFormat">
            <summary>
            Gets or sets the eye texture format.
            </summary>
        </member>
        <member name="P:OVRManager.tiledMultiResSupported">
            <summary>
            Gets if tiled-based multi-resolution technique is supported
            This feature is only supported on QCOMM-based Android devices
            </summary>
        </member>
        <member name="P:OVRManager.tiledMultiResLevel">
            <summary>
            Gets or sets the tiled-based multi-resolution level
            This feature is only supported on QCOMM-based Android devices
            </summary>
        </member>
        <member name="P:OVRManager.gpuUtilSupported">
            <summary>
            Gets if the GPU Utility is supported
            This feature is only supported on QCOMM-based Android devices
            </summary>
        </member>
        <member name="P:OVRManager.gpuUtilLevel">
            <summary>
            Gets the GPU Utilised Level (0.0 - 1.0)
            This feature is only supported on QCOMM-based Android devices
            </summary>
        </member>
        <member name="P:OVRManager.trackingOriginType">
            <summary>
            Defines the current tracking origin type.
            </summary>
        </member>
        <member name="F:OVRManager.usePositionTracking">
            <summary>
            If true, head tracking will affect the position of each OVRCameraRig's cameras.
            </summary>
        </member>
        <member name="F:OVRManager.useRotationTracking">
            <summary>
            If true, head tracking will affect the rotation of each OVRCameraRig's cameras.
            </summary>
        </member>
        <member name="F:OVRManager.useIPDInPositionTracking">
            <summary>
            If true, the distance between the user's eyes will affect the position of each OVRCameraRig's cameras.
            </summary>
        </member>
        <member name="F:OVRManager.resetTrackerOnLoad">
            <summary>
            If true, each scene load will cause the head pose to reset.
            </summary>
        </member>
        <member name="F:OVRManager.AllowRecenter">
            <summary>
            If true, the Reset View in the universal menu will cause the pose to be reset. This should generally be 
            enabled for applications with a stationary position in the virtual world and will allow the View Reset 
            command to place the person back to a predefined location (such as a cockpit seat). 
            Set this to false if you have a locomotion system because resetting the view would effectively teleport 
            the player to potentially invalid locations.
            </summary>
        </member>
        <member name="P:OVRManager.isSupportedPlatform">
            <summary>
            True if the current platform supports virtual reality.
            </summary>
        </member>
        <member name="P:OVRManager.isUserPresent">
            <summary>
            True if the user is currently wearing the display.
            </summary>
        </member>
        <member name="M:OVRManager.ReturnToLauncher">
            <summary>
            Leaves the application/game and returns to the launcher/dashboard
            </summary>
        </member>
        <member name="T:OVRMixedReality">
            <summary>
            Manages mix-reality elements
            </summary>
        </member>
        <member name="F:OVRMixedReality.chromaKeyColor">
            <summary>
            Configurable parameters
            </summary>
        </member>
        <member name="F:OVRMixedReality.useFakeExternalCamera">
            <summary>
            For Debugging purpose, we can use preset parameters to fake a camera when external camera is not available
            </summary>
        </member>
        <member name="F:OVRMixedReality.currentComposition">
            <summary>
            Composition object
            </summary>
        </member>
        <member name="M:OVRMixedReality.Update(UnityEngine.GameObject,UnityEngine.Camera,OVRManager.CompositionMethod,System.Boolean,OVRManager.CameraDevice,OVRManager.DepthQuality)">
            <summary>
            Updates the internal state of the Mixed Reality Camera. Called by OVRManager.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OVROverlay" -->
        <member name="T:OVROverlay.OverlayShape">
            <summary>
            Determines the on-screen appearance of a layer.
            </summary>
        </member>
        <member name="T:OVROverlay.OverlayType">
            <summary>
            Whether the layer appears behind or infront of other content in the scene.
            </summary>
        </member>
        <member name="F:OVROverlay.currentOverlayType">
            <summary>
            Specify overlay's type
            </summary>
        </member>
        <member name="F:OVROverlay.isDynamic">
            <summary>
            If true, the texture's content is copied to the compositor each frame.
            </summary>
        </member>
        <member name="F:OVROverlay.isProtectedContent">
            <summary>
            If true, the layer would be used to present protected content (e.g. HDCP). The flag is effective only on PC.
            </summary>
        </member>
        <member name="F:OVROverlay.currentOverlayShape">
            <summary>
            Specify overlay's shape
            </summary>
        </member>
        <member name="F:OVROverlay.textures">
            <summary>
            The left- and right-eye Textures to show in the layer.
            \note If you need to change the texture on a per-frame basis, please use OverrideOverlayTextureInfo(..) to avoid caching issues.
            </summary>
        </member>
        <member name="M:OVROverlay.OverrideOverlayTextureInfo(UnityEngine.Texture,System.IntPtr,UnityEngine.XR.XRNode)">
            <summary>
            Use this function to set texture and texNativePtr when app is running 
            GetNativeTexturePtr is a slow behavior, the value should be pre-cached 
            </summary>
        </member>
        <member name="T:OVRPlatformMenu">
            <summary>
            Shows the Oculus plaform UI.
            </summary>
        </member>
        <member name="F:OVRPlatformMenu.inputCode">
            <summary>
            The key code.
            </summary>
        </member>
        <member name="F:OVRPlatformMenu.OnShortPress">
            <summary>
            Callback to handle short press. Returns true if ConfirmQuit menu should be shown.
            </summary>
        </member>
        <member name="M:OVRPlatformMenu.Awake">
            <summary>
            Instantiate the cursor timer
            </summary>
        </member>
        <member name="M:OVRPlatformMenu.ShowConfirmQuitMenu">
            <summary>
            Show the confirm quit menu
            </summary>
        </member>
        <member name="M:OVRPlatformMenu.RetreatOneLevel">
            <summary>
            Sample handler for short press which retreats to the previous scene that used OVRPlatformMenu.
            </summary>
        </member>
        <member name="M:OVRPlatformMenu.Update">
            <summary>
            Tests for long-press and activates global platform menu when detected.
            as per the Unity integration doc, the back button responds to "mouse 1" button down/up/etc
            </summary>
        </member>
        <member name="F:OVRPlugin.Result.Success">
            Success
        </member>
        <member name="F:OVRPlugin.Result.Failure">
            Failure
        </member>
        <member name="T:OVRProfile">
            <summary>
            (Deprecated) Contains information about the user's preferences and body dimensions.
            </summary>
        </member>
        <member name="T:OVRTracker">
            <summary>
            An infrared camera that tracks the position of a head-mounted display.
            </summary>
        </member>
        <member name="T:OVRTracker.Frustum">
            <summary>
            The (symmetric) visible area in front of the sensor.
            </summary>
        </member>
        <member name="F:OVRTracker.Frustum.nearZ">
            <summary>
            The sensor's minimum supported distance to the HMD.
            </summary>
        </member>
        <member name="F:OVRTracker.Frustum.farZ">
            <summary>
            The sensor's maximum supported distance to the HMD.
            </summary>
        </member>
        <member name="F:OVRTracker.Frustum.fov">
            <summary>
            The sensor's horizontal and vertical fields of view in degrees.
            </summary>
        </member>
        <member name="P:OVRTracker.isPresent">
            <summary>
            If true, a sensor is attached to the system.
            </summary>
        </member>
        <member name="P:OVRTracker.isPositionTracked">
            <summary>
            If true, the sensor is actively tracking the HMD's position. Otherwise the HMD may be temporarily occluded, the system may not support position tracking, etc.
            </summary>
        </member>
        <member name="P:OVRTracker.isEnabled">
            <summary>
            If this is true and a sensor is available, the system will use position tracking when isPositionTracked is also true.
            </summary>
        </member>
        <member name="P:OVRTracker.count">
            <summary>
            Returns the number of sensors currently connected to the system.
            </summary>
        </member>
        <member name="M:OVRTracker.GetFrustum(System.Int32)">
            <summary>
            Gets the sensor's viewing frustum.
            </summary>
        </member>
        <member name="M:OVRTracker.GetPose(System.Int32)">
            <summary>
            Gets the sensor's pose, relative to the head's pose at the time of the last pose recentering.
            </summary>
        </member>
        <member name="M:OVRTracker.GetPoseValid(System.Int32)">
            <summary>
            If true, the pose of the sensor is valid and is ready to be queried.
            </summary>
        </member>
        <member name="T:OVRChromaticAberration">
            <summary>
            Allows you to toggle chromatic aberration correction with a gamepad button press.
            </summary>
        </member>
        <member name="F:OVRChromaticAberration.toggleButton">
            <summary>
            The button that will toggle chromatic aberration correction.
            </summary>
        </member>
        <member name="T:OVRCubemapCapture">
            <summary>
            Helper script for capture cubemap and save it into PNG or JPG file
            </summary>
            <description>
            How it works:
            1) This script can be attached to a existing game object, you can also use prefab Assets\OVR\Prefabs\OVRCubemapCaptureProbe
            There are 2 ways to trigger a capture if you attached this script to a game object.  
            	* Automatic capturing: if [autoTriggerAfterLaunch] is true, a automatic capturing will be triggered after [autoTriggerDelay] seconds.
            	* Keyboard trigger: press key [triggeredByKey], a capturing will be triggered.
            2) If you like to trigger the screen capture in your code logic, just call static function [OVRCubemapCapture.TriggerCubemapCapture] with proper input arguments. 
            </description>
        </member>
        <member name="F:OVRCubemapCapture.autoTriggerAfterLaunch">
            <summary>
            Enable the automatic screenshot trigger, which will capture a cubemap after autoTriggerDelay (seconds)
            </summary>
        </member>
        <member name="F:OVRCubemapCapture.triggeredByKey">
            <summary>
            Trigger cubemap screenshot if user pressed key triggeredByKey
            </summary>
        </member>
        <member name="F:OVRCubemapCapture.pathName">
            <summary>
            The complete file path for saving the cubemap screenshot, including the filename and extension
            if pathName is blank, screenshots will be saved into %USERPROFILE%\Documents\OVR_ScreenShot360
            </summary>
        </member>
        <member name="F:OVRCubemapCapture.cubemapSize">
            <summary>
            The cube face resolution
            </summary>
        </member>
        <member name="M:OVRCubemapCapture.TriggerCubemapCapture(UnityEngine.Vector3,System.Int32,System.String)">
            <summary>
            Generate unity cubemap at specific location and save into JPG/PNG
            </summary>
            <description>
            Default save folder: your app's persistentDataPath 
            Default file name: using current time OVR_hh_mm_ss.png 
            Note1: this will take a few seconds to finish
            Note2: if you only want to specify path not filename, please end [pathName] with "/" 
            </description>
        </member>
        <member name="M:OVRCubemapCapture.SaveCubemapCapture(UnityEngine.Cubemap,System.String)">
            <summary>
            Save unity cubemap into NPOT 6x1 cubemap/texture atlas in the following format PX NX PY NY PZ NZ
            </summary>
            <description>
            Supported format: PNG/JPG
            Default file name: using current time OVR_hh_mm_ss.png 
            </description>
        </member>
        <member name="T:OVRDebugInfo">
            <summary>
            Shows debug information on a heads-up display.
            </summary>
        </member>
        <member name="F:OVRDebugInfo.updateInterval">
            <summary>
            Variables for FPS
            </summary>
        </member>
        <member name="F:OVRDebugInfo.initUIComponent">
            <summary>
            Managing for UI initialization
            </summary>
        </member>
        <member name="F:OVRDebugInfo.offsetY">
            <summary>
            UIs Y offset
            </summary>
        </member>
        <member name="F:OVRDebugInfo.riftPresentTimeout">
            <summary>
            Managing for rift detection UI
            </summary>
        </member>
        <member name="F:OVRDebugInfo.showVRVars">
            <summary>
            Turn on / off VR variables
            </summary>
        </member>
        <member name="M:OVRDebugInfo.Awake">
            <summary>
            Initialization
            </summary>
        </member>
        <member name="M:OVRDebugInfo.Update">
            <summary>
            Updating VR variables and managing UI present
            </summary>
        </member>
        <member name="M:OVRDebugInfo.OnDestroy">
            <summary>
            Initialize isInited value on OnDestroy
            </summary>
        </member>
        <member name="M:OVRDebugInfo.InitUIComponents">
            <summary>
            Initialize UI GameObjects
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateVariable">
            <summary>
            Update VR Variables
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateStrings">
            <summary>
            Update Strings
            </summary>
        </member>
        <member name="M:OVRDebugInfo.RiftPresentGUI(UnityEngine.GameObject)">
            <summary>
            It's for rift present GUI
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateDeviceDetection">
            <summary>
            Updates the device detection.
            </summary>
        </member>
        <member name="M:OVRDebugInfo.VariableObjectManager(UnityEngine.GameObject,System.String,System.Single,System.String,System.Int32)">
            <summary>
            Object Manager for Variables
            </summary>
            <returns> gameobject for each Variable </returns>
        </member>
        <member name="M:OVRDebugInfo.ComponentComposition(UnityEngine.GameObject)">
            <summary>
            Component composition
            </summary>
            <returns> Composed gameobject. </returns>
        </member>
        <member name="M:OVRDebugInfo.UpdateIPD">
            <summary>
            Updates the IPD.
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateEyeHeightOffset">
            <summary>
            Updates the eye height offset.
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateEyeDepthOffset">
            <summary>
            Updates the eye depth offset.
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateFOV">
            <summary>
            Updates the FOV.
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateResolutionEyeTexture">
            <summary>
            Updates resolution of eye texture
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateLatencyValues">
            <summary>
            Updates latency values
            </summary>
        </member>
        <member name="M:OVRDebugInfo.UpdateFPS">
            <summary>
            Updates the FPS.
            </summary>
        </member>
        <member name="T:OVRGazePointer">
            <summary>
            UI pointer driven by gaze input.
            </summary>
        </member>
        <member name="F:OVRGazePointer.rayTransform">
            <summary>
            The gaze ray.
            </summary>
        </member>
        <member name="P:OVRGazePointer.hidden">
            <summary>
            Is gaze pointer current visible
            </summary>
        </member>
        <member name="P:OVRGazePointer.currentScale">
            <summary>
            Current scale applied to pointer
            </summary>
        </member>
        <member name="F:OVRGazePointer.depth">
            <summary>
            Current depth of pointer from camera
            </summary>
        </member>
        <member name="F:OVRGazePointer.positionSetsThisFrame">
            <summary>
            How many times position has been set this frame. Used to detect when there are no position sets in a frame.
            </summary>
        </member>
        <member name="F:OVRGazePointer.lastShowRequestTime">
            <summary>
            Last time code requested the pointer be shown. Usually when pointer passes over interactive elements.
            </summary>
        </member>
        <member name="F:OVRGazePointer.lastHideRequestTime">
            <summary>
            Last time pointer was requested to be hidden. Usually mouse pointer activity.
            </summary>
        </member>
        <member name="P:OVRGazePointer.visibilityStrength">
            <summary>
            Used to determine alpha level of gaze cursor. Could also be used to determine cursor size, for example, as the cursor fades out.
            </summary>
        </member>
        <member name="M:OVRGazePointer.SetPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Set position and orientation of pointer
            </summary>
            <param name="pos"></param>
            <param name="normal"></param>
        </member>
        <member name="M:OVRGazePointer.SetPosition(UnityEngine.Vector3)">
            <summary>
            SetPosition overload without normal. Just makes cursor face user
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:OVRGazePointer.RequestHide">
            <summary>
            Request the pointer be hidden
            </summary>
        </member>
        <member name="M:OVRGazePointer.RequestShow">
            <summary>
            Request the pointer be shown. Hide requests take priority
            </summary>
        </member>
        <member name="T:OVRGrabbable">
            <summary>
            An object that can be grabbed and thrown by OVRGrabber.
            </summary>
        </member>
        <member name="P:OVRGrabbable.allowOffhandGrab">
            <summary>
            If true, the object can currently be grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.isGrabbed">
            <summary>
            If true, the object is currently grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.snapPosition">
            <summary>
            If true, the object's position will snap to match snapOffset when grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.snapOrientation">
            <summary>
            If true, the object's orientation will snap to match snapOffset when grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.snapOffset">
            <summary>
            An offset relative to the OVRGrabber where this object can snap when grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.grabbedBy">
            <summary>
            Returns the OVRGrabber currently grabbing this object.
            </summary>
        </member>
        <member name="P:OVRGrabbable.grabbedTransform">
            <summary>
            The transform at which this object was grabbed.
            </summary>
        </member>
        <member name="P:OVRGrabbable.grabbedRigidbody">
            <summary>
            The Rigidbody of the collider that was used to grab this object.
            </summary>
        </member>
        <member name="P:OVRGrabbable.grabPoints">
            <summary>
            The contact point(s) where the object was grabbed.
            </summary>
        </member>
        <member name="M:OVRGrabbable.GrabBegin(OVRGrabber,UnityEngine.Collider)">
            <summary>
            Notifies the object that it has been grabbed.
            </summary>
        </member>
        <member name="M:OVRGrabbable.GrabEnd(UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Notifies the object that it has been released.
            </summary>
        </member>
        <member name="T:OVRGrabber">
            <summary>
            Allows grabbing and throwing of objects with the OVRGrabbable component on them.
            </summary>
        </member>
        <member name="P:OVRGrabber.grabbedObject">
            <summary>
            The currently grabbed object.
            </summary>
        </member>
        <member name="T:OVRGridCube">
            <summary>
            Diagnostic display with a regular grid of cubes for visual testing of
            tracking and distortion.
            </summary>
        </member>
        <member name="F:OVRGridCube.GridKey">
            <summary>
            The key that toggles the grid of cubes.
            </summary>
        </member>
        <member name="M:OVRGridCube.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRGridCube.SetOVRCameraController(OVRCameraRig@)">
            <summary>
            Sets the OVR camera controller.
            </summary>
            <param name="cameraController">Camera controller.</param>
        </member>
        <member name="M:OVRGridCube.CubeGridSwitchColor(System.Boolean)">
            <summary>
            Switch the Cube grid color.
            </summary>
            <param name="CubeSwitchColor">If set to <c>true</c> cube switch color.</param>
        </member>
        <member name="T:UnityEngine.EventSystems.OVRInputModule">
            <summary>
            VR extension of PointerInputModule which supports gaze and controller pointing.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.OVRInputModule.m_VerticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.OVRInputModule.m_SubmitButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.OVRInputModule.m_CancelButton">
            <summary>
            Name of the submit button.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.OVRInputModule.horizontalAxis">
            <summary>
            Name of the horizontal axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.OVRInputModule.verticalAxis">
            <summary>
            Name of the vertical axis for movement (if axis events are used).
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.SendSubmitEventToSelectedObject">
            <summary>
            Process submit keys.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.SendMoveEventToSelectedObject">
            <summary>
            Process keyboard events.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.ProcessMousePress(UnityEngine.EventSystems.PointerInputModule.MouseButtonEventData)">
            <summary>
            Process the current mouse press.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.ProcessMouseEvent(UnityEngine.EventSystems.PointerInputModule.MouseState)">
            <summary>
            Process all mouse events. This is the same as the StandaloneInputModule version except that
            it takes MouseState as a parameter, allowing it to be used for both Gaze and Mouse 
            pointerss.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.Process">
            <summary>
            Process this InputModule. Same as the StandaloneInputModule version, except that it calls
            ProcessMouseEvent twice, once for gaze pointers, and once for mouse pointers.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.UseMouse(System.Boolean,System.Boolean,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Decide if mouse events need to be processed this frame. Same as StandloneInputModule except
            that the IsPointerMoving method from this class is used, instead of the method on PointerEventData
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.CopyFromTo(UnityEngine.EventSystems.OVRPointerEventData,UnityEngine.EventSystems.OVRPointerEventData)">
            <summary>
            Convenience function for cloning PointerEventData
            </summary>
            <param name="from">Copy this value</param>
            <param name="to">to this object</param>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.CopyFromTo(UnityEngine.EventSystems.PointerEventData,UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Convenience function for cloning PointerEventData
            </summary>
            <param name="from">Copy this value</param>
            <param name="to">to this object</param>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.ClearSelection">
            <summary>
            Clear pointer state for both types of pointer
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.GetRectTransformNormal(UnityEngine.RectTransform)">
            <summary>
            For RectTransform, calculate it's normal in world space
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.GetGazePointerData">
            <summary>
            State for a pointer controlled by a world space ray. E.g. gaze pointer
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.GetCanvasPointerData">
            <summary>
            Get state for pointer which is a pointer moving in world space across the surface of a world space canvas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.ShouldStartDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            New version of ShouldStartDrag implemented first in PointerInputModule. This version differs in that
            for ray based pointers it makes a decision about whether a drag should start based on the angular change
            the pointer has made so far, as seen from the camera. This also works when the world space ray is 
            translated rather than rotated, since the beginning and end of the movement are considered as angle from
            the same point.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.IsPointerMoving(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            The purpose of this function is to allow us to switch between using the standard IsPointerMoving
            method for mouse driven pointers, but to always return true when it's a ray based pointer. 
            All real-world ray-based input devices are always moving so for simplicity we just return true
            for them. 
            
            If PointerEventData.IsPointerMoving was virtual we could just override that in
            OVRRayPointerEventData.
            </summary>
            <param name="pointerEvent"></param>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.ProcessDrag(UnityEngine.EventSystems.PointerEventData)">
            <summary>
            Exactly the same as the code from PointerInputModule, except that we call our own
            IsPointerMoving.
            
            This would also not be necessary if PointerEventData.IsPointerMoving was virtual
            </summary>
            <param name="pointerEvent"></param>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.GetGazeButtonState">
            <summary>
            Get state of button corresponding to gaze pointer
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRInputModule.GetExtraScrollDelta">
            <summary>
            Get extra scroll delta from gamepad
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.OVRPhysicsRaycaster">
            <summary>
            Simple event system using physics raycasts. Very closely based on UnityEngine.EventSystems.PhysicsRaycaster
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.OVRPhysicsRaycaster.kNoEventMaskSet">
            <summary>
            Const to use for clarity when no event mask is set
            </summary>
        </member>
        <member name="F:UnityEngine.EventSystems.OVRPhysicsRaycaster.m_EventMask">
            <summary>
            Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.OVRPhysicsRaycaster.depth">
            <summary>
            Depth used to determine the order of event processing.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.OVRPhysicsRaycaster.finalEventMask">
            <summary>
            Event mask used to determine which objects will receive events.
            </summary>
        </member>
        <member name="P:UnityEngine.EventSystems.OVRPhysicsRaycaster.eventMask">
            <summary>
            Layer mask used to filter events. Always combined with the camera's culling mask if a camera is used.
            </summary>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRPhysicsRaycaster.Raycast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Perform a raycast using the worldSpaceRay in eventData.
            </summary>
            <param name="eventData"></param>
            <param name="resultAppendList"></param>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRPhysicsRaycaster.Spherecast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult},System.Single)">
            <summary>
             Perform a Spherecast using the worldSpaceRay in eventData.
            </summary>
            <param name="eventData"></param>
            <param name="resultAppendList"></param>
            <param name="radius">Radius of the sphere</param>
        </member>
        <member name="M:UnityEngine.EventSystems.OVRPhysicsRaycaster.GetScreenPos(UnityEngine.Vector3)">
            <summary>
            Get screen position of this world position as seen by the event camera of this OVRPhysicsRaycaster
            </summary>
            <param name="worldPosition"></param>
            <returns></returns>
        </member>
        <member name="T:UnityEngine.EventSystems.OVRPointerEventData">
            <summary>
            Extension of Unity's PointerEventData to support ray based pointing and also touchpad swiping
            </summary>
        </member>
        <member name="T:UnityEngine.EventSystems.PointerEventDataExtension">
            <summary>
            Static helpers for OVRPointerEventData.
            </summary>
        </member>
        <member name="T:OVRModeParms">
            <summary>
            Logs when the application enters power save mode and allows you to a low-power CPU/GPU level with a button press.
            </summary>
        </member>
        <member name="F:OVRModeParms.resetButton">
            <summary>
            The gamepad button that will switch the application to CPU level 0 and GPU level 1.
            </summary>
        </member>
        <member name="M:OVRModeParms.Start">
            <summary>
            Invoke power state mode test.
            </summary>
        </member>
        <member name="M:OVRModeParms.Update">
            <summary>
            Change default vr mode parms dynamically.
            </summary>
        </member>
        <member name="M:OVRModeParms.TestPowerStateMode">
            <summary>
            Check current power state mode.
            </summary>
        </member>
        <member name="T:OVRMonoscopic">
            <summary>
            Allows you to toggle monoscopic rendering with a gamepad button press.
            </summary>
        </member>
        <member name="F:OVRMonoscopic.toggleButton">
            <summary>
            The gamepad button that will toggle monoscopic rendering.
            </summary>
        </member>
        <member name="M:OVRMonoscopic.Update">
            <summary>
            Check input and toggle monoscopic rendering mode if necessary
            See the input mapping setup in the Unity Integration guide
            </summary>
        </member>
        <member name="T:OVRPlayerController">
            <summary>
            Controls the player's movement in virtual reality.
            </summary>
        </member>
        <member name="F:OVRPlayerController.Acceleration">
            <summary>
            The rate acceleration during movement.
            </summary>
        </member>
        <member name="F:OVRPlayerController.Damping">
            <summary>
            The rate of damping on movement.
            </summary>
        </member>
        <member name="F:OVRPlayerController.BackAndSideDampen">
            <summary>
            The rate of additional damping when moving sideways or backwards.
            </summary>
        </member>
        <member name="F:OVRPlayerController.JumpForce">
            <summary>
            The force applied to the character when jumping.
            </summary>
        </member>
        <member name="F:OVRPlayerController.RotationAmount">
            <summary>
            The rate of rotation when using a gamepad.
            </summary>
        </member>
        <member name="F:OVRPlayerController.RotationRatchet">
            <summary>
            The rate of rotation when using the keyboard.
            </summary>
        </member>
        <member name="F:OVRPlayerController.SnapRotation">
            <summary>
            The player will rotate in fixed steps if Snap Rotation is enabled.
            </summary>
        </member>
        <member name="F:OVRPlayerController.FixedSpeedSteps">
            <summary>
            How many fixed speeds to use with linear movement? 0=linear control
            </summary>
        </member>
        <member name="F:OVRPlayerController.HmdResetsY">
            <summary>
            If true, reset the initial yaw of the player controller when the Hmd pose is recentered.
            </summary>
        </member>
        <member name="F:OVRPlayerController.HmdRotatesY">
            <summary>
            If true, tracking data from a child OVRCameraRig will update the direction of movement.
            </summary>
        </member>
        <member name="F:OVRPlayerController.GravityModifier">
            <summary>
            Modifies the strength of gravity.
            </summary>
        </member>
        <member name="F:OVRPlayerController.useProfileData">
            <summary>
            If true, each OVRPlayerController will use the player's physical height.
            </summary>
        </member>
        <member name="F:OVRPlayerController.CameraHeight">
            <summary>
            The CameraHeight is the actual height of the HMD and can be used to adjust the height of the character controller, which will affect the
            ability of the character to move into areas with a low ceiling.
            </summary>
        </member>
        <member name="E:OVRPlayerController.TransformUpdated">
            <summary>
            This event is raised after the character controller is moved. This is used by the OVRAvatarLocomotion script to keep the avatar transform synchronized
            with the OVRPlayerController.
            </summary>
        </member>
        <member name="F:OVRPlayerController.Teleported">
            <summary>
            This bool is set to true whenever the player controller has been teleported. It is reset after every frame. Some systems, such as 
            CharacterCameraConstraint, test this boolean in order to disable logic that moves the character controller immediately 
            following the teleport.
            </summary>
        </member>
        <member name="E:OVRPlayerController.CameraUpdated">
            <summary>
            This event is raised immediately after the camera transform has been updated, but before movement is updated.
            </summary>
        </member>
        <member name="E:OVRPlayerController.PreCharacterMove">
            <summary>
            This event is raised right before the character controller is actually moved in order to provide other systems the opportunity to 
            move the character controller in response to things other than user input, such as movement of the HMD. See CharacterCameraConstraint.cs
            for an example of this.
            </summary>
        </member>
        <member name="F:OVRPlayerController.EnableLinearMovement">
            <summary>
            When true, user input will be applied to linear movement. Set this to false whenever the player controller needs to ignore input for
            linear movement.
            </summary>
        </member>
        <member name="F:OVRPlayerController.EnableRotation">
            <summary>
            When true, user input will be applied to rotation. Set this to false whenever the player controller needs to ignore input for rotation.
            </summary>
        </member>
        <member name="M:OVRPlayerController.UpdateTransform(OVRCameraRig)">
            <summary>
            Invoked by OVRCameraRig's UpdatedAnchors callback. Allows the Hmd rotation to update the facing direction of the player.
            </summary>
        </member>
        <member name="M:OVRPlayerController.Jump">
            <summary>
            Jump! Must be enabled manually.
            </summary>
        </member>
        <member name="M:OVRPlayerController.Stop">
            <summary>
            Stop this instance.
            </summary>
        </member>
        <member name="M:OVRPlayerController.GetMoveScaleMultiplier(System.Single@)">
            <summary>
            Gets the move scale multiplier.
            </summary>
            <param name="moveScaleMultiplier">Move scale multiplier.</param>
        </member>
        <member name="M:OVRPlayerController.SetMoveScaleMultiplier(System.Single)">
            <summary>
            Sets the move scale multiplier.
            </summary>
            <param name="moveScaleMultiplier">Move scale multiplier.</param>
        </member>
        <member name="M:OVRPlayerController.GetRotationScaleMultiplier(System.Single@)">
            <summary>
            Gets the rotation scale multiplier.
            </summary>
            <param name="rotationScaleMultiplier">Rotation scale multiplier.</param>
        </member>
        <member name="M:OVRPlayerController.SetRotationScaleMultiplier(System.Single)">
            <summary>
            Sets the rotation scale multiplier.
            </summary>
            <param name="rotationScaleMultiplier">Rotation scale multiplier.</param>
        </member>
        <member name="M:OVRPlayerController.GetSkipMouseRotation(System.Boolean@)">
            <summary>
            Gets the allow mouse rotation.
            </summary>
            <param name="skipMouseRotation">Allow mouse rotation.</param>
        </member>
        <member name="M:OVRPlayerController.SetSkipMouseRotation(System.Boolean)">
            <summary>
            Sets the allow mouse rotation.
            </summary>
            <param name="skipMouseRotation">If set to <c>true</c> allow mouse rotation.</param>
        </member>
        <member name="M:OVRPlayerController.GetHaltUpdateMovement(System.Boolean@)">
            <summary>
            Gets the halt update movement.
            </summary>
            <param name="haltUpdateMovement">Halt update movement.</param>
        </member>
        <member name="M:OVRPlayerController.SetHaltUpdateMovement(System.Boolean)">
            <summary>
            Sets the halt update movement.
            </summary>
            <param name="haltUpdateMovement">If set to <c>true</c> halt update movement.</param>
        </member>
        <member name="M:OVRPlayerController.ResetOrientation">
            <summary>
            Resets the player look rotation when the device orientation is reset.
            </summary>
        </member>
        <member name="T:OVRProgressIndicator">
            <summary>
            Visualizes progress for operations such as loading.
            </summary>
        </member>
        <member name="T:OVRRaycaster">
            <summary>
            Extension of GraphicRaycaster to support ray casting with world space rays instead of just screen-space
            pointer positions
            </summary>
        </member>
        <member name="F:OVRRaycaster.m_RaycastResults">
            <summary>
            For the given ray, find graphics on this canvas which it intersects and are not blocked by other
            world objects
            </summary>
        </member>
        <member name="M:OVRRaycaster.Raycast(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Performs a raycast using eventData.worldSpaceRay
            </summary>
            <param name="eventData"></param>
            <param name="resultAppendList"></param>
        </member>
        <member name="M:OVRRaycaster.RaycastPointer(UnityEngine.EventSystems.PointerEventData,System.Collections.Generic.List{UnityEngine.EventSystems.RaycastResult})">
            <summary>
            Performs a raycast using the pointer object attached to this OVRRaycaster 
            </summary>
            <param name="eventData"></param>
            <param name="resultAppendList"></param>
        </member>
        <member name="F:OVRRaycaster.s_SortedGraphics">
            <summary>
            Perform a raycast into the screen and collect all graphics underneath it.
            </summary>
        </member>
        <member name="M:OVRRaycaster.GetScreenPosition(UnityEngine.EventSystems.RaycastResult)">
            <summary>
            Get screen position of worldPosition contained in this RaycastResult
            </summary>
            <param name="worldPosition"></param>
            <returns></returns>
        </member>
        <member name="M:OVRRaycaster.RayIntersectsRectTransform(UnityEngine.RectTransform,UnityEngine.Ray,UnityEngine.Vector3@)">
            <summary>
            Detects whether a ray intersects a RectTransform and if it does also 
            returns the world position of the intersection.
            </summary>
            <param name="rectTransform"></param>
            <param name="ray"></param>
            <param name="worldPos"></param>
            <returns></returns>
        </member>
        <member name="M:OVRRaycaster.IsFocussed">
            <summary>
            Is this the currently focussed Raycaster according to the InputModule
            </summary>
            <returns></returns>
        </member>
        <member name="T:OVRResetOrientation">
            <summary>
            Allows you to reset VR input tracking with a gamepad button press.
            </summary>
        </member>
        <member name="F:OVRResetOrientation.resetButton">
            <summary>
            The gamepad button that will reset VR input tracking.
            </summary>
        </member>
        <member name="M:OVRResetOrientation.Update">
            <summary>
            Check input and reset orientation if necessary
            See the input mapping setup in the Unity Integration guide
            </summary>
        </member>
        <member name="T:OVRSceneSampleController">
            <summary>
            Sample that allows you to play with various VR settings. 
            </summary>
        </member>
        <member name="F:OVRSceneSampleController.quitKey">
            <summary>
            The key that quits the application.
            </summary>
        </member>
        <member name="F:OVRSceneSampleController.fadeInTexture">
            <summary>
            An optional texture that appears before the menu fades in.
            </summary>
        </member>
        <member name="F:OVRSceneSampleController.speedRotationIncrement">
            <summary>
            Controls how quickly the player's speed and rotation change based on input.
            </summary>
        </member>
        <member name="F:OVRSceneSampleController.layerName">
            <summary>
            We can set the layer to be anything we want to, this allows
            a specific camera to render it.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.Awake">
            <summary>
            Awake this instance.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.Start">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.Update">
            <summary>
            Update this instance.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.UpdateVisionMode">
            <summary>
            Updates the vision mode.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.UpdateSpeedAndRotationScaleMultiplier">
            <summary>
            Updates the speed and rotation scale multiplier.
            </summary>
        </member>
        <member name="M:OVRSceneSampleController.UpdateRecenterPose">
            <summary>
            Recenter pose
            </summary>
        </member>
        <member name="T:OVRScreenFade">
            <summary>
            Fades the screen from black after a new scene is loaded. Fade can also be controlled mid-scene using SetUIFade and SetFadeLevel
            </summary>
        </member>
        <member name="F:OVRScreenFade.renderQueue">
            <summary>
            The render queue used by the fade mesh. Reduce this if you need to render on top of it.
            </summary>
        </member>
        <member name="M:OVRScreenFade.FadeOut">
            <summary>
            Start a fade out
            </summary>
        </member>
        <member name="M:OVRScreenFade.OnLevelFinishedLoading(System.Int32)">
            <summary>
            Starts a fade in when a new level is loaded
            </summary>
        </member>
        <member name="M:OVRScreenFade.Start">
            <summary>
            Automatically starts a fade in
            </summary>
        </member>
        <member name="M:OVRScreenFade.OnDestroy">
            <summary>
            Cleans up the fade material
            </summary>
        </member>
        <member name="M:OVRScreenFade.SetUIFade(System.Single)">
            <summary>
            Set the UI fade level - fade due to UI in foreground
            </summary>
        </member>
        <member name="M:OVRScreenFade.SetFadeLevel(System.Single)">
            <summary>
            Override current fade level
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:OVRScreenFade.Fade(System.Single,System.Single)">
            <summary>
            Fades alpha from 1.0 to 0.0
            </summary>
        </member>
        <member name="M:OVRScreenFade.SetMaterialAlpha">
            <summary>
            Update material alpha. UI fade and the current fade due to fade in/out animations (or explicit control)
            both affect the fade. (The max is taken) 
            </summary>
        </member>
        <member name="T:OVRTrackedRemote">
            <summary>
            Simple helper script that conditionally enables rendering of a controller if it is connected.
            </summary>
        </member>
        <member name="F:OVRTrackedRemote.m_modelGearVrController">
            <summary>
            The root GameObject that represents the GearVr Controller model.
            </summary>
        </member>
        <member name="F:OVRTrackedRemote.m_modelOculusGoController">
            <summary>
            The root GameObject that represents the Oculus Go Controller model.
            </summary>
        </member>
        <member name="F:OVRTrackedRemote.m_controller">
            <summary>
            The controller that determines whether or not to enable rendering of the controller model.
            </summary>
        </member>
        <member name="T:OVRWaitCursor">
            <summary>
            Rotates this GameObject at a given speed.
            </summary>
        </member>
        <member name="M:OVRWaitCursor.Update">
            <summary>
            Auto rotates the attached cursor.
            </summary>
        </member>
        <member name="M:TMPro.Examples.SkewTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealCharacters(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one character at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TextConsoleSimulator.RevealWords(TMPro.TMP_Text)">
            <summary>
            Method revealing the text one word at a time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawCharactersBounds">
            <summary>
            Method to draw a rectangle around each character.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawWordBounds">
            <summary>
            Method to draw rectangles around each word of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLinkBounds">
            <summary>
            Draw rectangle around each of the links contained in the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawLineBounds">
            <summary>
            Draw Rectangles around each lines of the text.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:TMPro.Examples.TMP_TextInfoDebugTool.DrawBounds">
            <summary>
            Draw Rectangle around the bounds of the text object.
            </summary>
        </member>
        <member name="M:TMPro.Examples.VertexColorCycler.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TMPro.Examples.VertexJitter.VertexAnim">
            <summary>
            Structure to hold pre-computed animation data.
            </summary>
        </member>
        <member name="M:TMPro.Examples.VertexJitter.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeA.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexShakeB.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.VertexZoom.AnimateVertexColors">
            <summary>
            Method to animate vertex colors of a TMP Text object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TMPro.Examples.WarpTextExample.WarpText">
            <summary>
             Method to curve text along a Unity animation curve.
            </summary>
            <param name="textComponent"></param>
            <returns></returns>
        </member>
        <member name="T:TMPro.TMP_DigitValidator">
            <summary>
            EXample of a Custom Character Input Validator to only allow digits from 0 to 9.
            </summary>
        </member>
        <member name="T:TMPro.TMP_PhoneNumberValidator">
            <summary>
            Example of a Custom Character Input Validator to only allow phone number in the (800) 555-1212 format.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onCharacterSelection">
            <summary>
            Event delegate triggered when pointer is over a character.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onSpriteSelection">
            <summary>
            Event delegate triggered when pointer is over a sprite.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onWordSelection">
            <summary>
            Event delegate triggered when pointer is over a word.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLineSelection">
            <summary>
            Event delegate triggered when pointer is over a line.
            </summary>
        </member>
        <member name="P:TMPro.TMP_TextEventHandler.onLinkSelection">
            <summary>
            Event delegate triggered when pointer is over a link.
            </summary>
        </member>
    </members>
</doc>
